{"version":3,"file":"history.min.js","sources":["../src/history.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Poodll - audio recorder configuration.\n *\n * @module      tiny_poodll/audio_recorder\n * @copyright   2023 Justin Hunt <justin@poodll.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\nimport * as Ajax from 'core/ajax';\nimport {component, CSS, INSERTMETHOD, SKIN} from \"./common\";\nimport * as Templates from 'core/templates';\nimport * as Notification from 'core/notification';\nimport * as ModalFactory from 'core/modal_factory';\nimport * as ModalEvents from 'core/modal_events';\nimport Log from 'core/log';\nimport {get_strings as getStrings} from \"core/str\";\n\nexport default class {\n\n    itemdata= [];\n    component = 'tiny_poodll';\n    strings = {};\n\n    /**\n     * Constructor for the Tiny Poodll Recorder History Tab\n     *\n     * @param {recorder} recorder The recorder this history is associated with\n     */\n    constructor(recorder) {\n        var that =this;\n        var config = recorder.config;\n        var processHistoryItems = function (historyitems) {\n            /**\n             * Takes a mysql unix timestamp (in seconds) and converts to a display date.\n             *\n             * @method _formatUnixDate\n             * @param {integer} dateToFormat Date to format\n             */\n            function _formatUnixDate(dateToFormat) {\n                var dateObj = new Date(dateToFormat * 1000);\n\n                var month = dateObj.getUTCMonth() + 1;\n                var day = dateObj.getUTCDate();\n                var year = dateObj.getUTCFullYear();\n\n                return month + \"/\" + day + \"/\" + year;\n            }\n\n            if (Array.isArray(historyitems.responses)) {\n                historyitems.responses.forEach(function(item){\n                    if(item.hasOwnProperty('dateofentry')) {\n                        item.displaydateofentry = _formatUnixDate(item.dateofentry);\n                        item.displayfiletitle = item.filetitle.substring(0, config.filetitledisplaylength) + '...';\n                        item.editablefield = [JSON.parse(item.editabletitle)];\n                        that.itemdata[item.id] = item;\n                    }\n                });\n            }\n\n            var context = {data: historyitems.responses};\n            return Templates.render('tiny_poodll/historypanel', context);\n\n        };\n\n        this.recorder = recorder;\n        this.loadHistory()\n            .then(processHistoryItems)\n            .then(function (html, js) {\n                Templates.replaceNodeContents('div[data-field=\"history\"]', html, js);\n                that.initDataTables();\n                that.registerEvents();\n        });\n        this.initStrings();\n    }\n\n    initStrings() {\n        var that =this;\n        getStrings([\n            { \"key\": \"previewitem\", \"component\": this.component },\n            { \"key\": \"deleteitem\", \"component\": this.component },\n            { \"key\": \"confirmdelete\", \"component\": this.component },\n            { \"key\": \"loading\", \"component\": this.component },\n            { \"key\": \"insertitem\", \"component\": this.component }\n        ]).done(function (s) {\n            var i = 0;\n            that.strings.previewitem = s[i++];\n            that.strings.deleteitem = s[i++];\n            that.strings.confirmdelete = s[i++];\n            that.strings.loading = s[i++];\n            that.strings.insertitem = s[i++];\n        });\n    }\n\n    initDataTables() {\n        var that=this;\n        require(\n            ['jquery','https://cdn.datatables.net/1.13.5/js/jquery.dataTables.min.js',], function($, datatable) {\n\n                that.table = $('#tiny_poodll_history_table').DataTable();\n\n                Log.debug('datatable loaded');\n                Log.debug(that.table);\n\n            });\n    }\n\n   registerEvents() {\n        const that = this;\n        Log.debug('events registering');\n\n        // Handle the removal of an item from the history table\n        document.getElementById('tiny_poodll_history_table').addEventListener('click', function(event) {\n            const target = event.target;\n            if (target.dataset.actionType === 'delete') {\n                Log.debug('delete clicked');\n                const clickedLink = target;\n                ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: that.strings.deleteitem,\n                    body: that.strings.confirmdelete,\n                }, clickedLink)\n                    .then(function(modal) {\n                        modal.setSaveButtonText(that.strings.deleteitem);\n                        const root = modal.getRoot();\n                        root.on(ModalEvents.cancel, function() { modal.hide(); });\n                        root.on(ModalEvents.save, function() {\n                            const historyRow = clickedLink.closest('tr').previousElementSibling;\n                            const historyItemId = historyRow.dataset.historyId;\n                            const childHistoryRow = clickedLink.closest('tr');\n\n                            Ajax.call([{\n                                methodname: 'tiny_poodll_history_archive',\n                                args: { 'id': historyItemId },\n                                done: function() {\n                                    childHistoryRow.style.display = 'none';\n                                    historyRow.style.display = 'none';\n                                }\n                            }]);\n                            modal.hide();\n                        });\n                        modal.show();\n                    });\n            }\n        });\n\n        // Handle the insert of an item from history\n        document.getElementById('tiny_poodll_history_table').addEventListener('click', function(event) {\n            const target = event.target;\n            if (target.dataset.actionType === 'add') {\n                Log.debug('insert clicked');\n                const historyItem = that.fetchHistoryItem(target.dataset.historyId);\n                that.recorder.doInsert(historyItem.mediaurl, historyItem.mediafilename,\n                    historyItem.sourceurl, historyItem.sourcemimetype);\n            }\n        });\n\n        // Handle the preview of an item in the history table\n        document.getElementById('tiny_poodll_history_table').addEventListener('click', function(event) {\n            const target = event.target;\n            if (target.dataset.actionType === 'preview') {\n                Log.debug('preview clicked');\n                const clickedLink = target;\n                that.loadHistoryPreview(target.dataset.historyId, clickedLink);\n            }\n        });\n\n        // Toggle display of row in the history table\n        document.querySelector('#tiny_poodll_history_table tbody').addEventListener('click', function(event) {\n            const target = event.target;\n            if (target.classList.contains('details-control')) {\n                Log.debug('details control clicked');\n                const tr = target.closest('tr');\n                const row = that.table.row(tr);\n                if (row.child.isShown()) {\n                    row.child.hide();\n                    tr.classList.remove('shown');\n                } else {\n                    const rowdata = { \"name\": \"id\", \"value\": tr.dataset.historyId };\n                    Templates.render('tiny_poodll/historyrow', rowdata).then(\n                        function(html, js) {\n                            row.child(html).show();\n                            Log.debug('added ' + html);\n                            tr.classList.add('shown');\n                        }\n                    );\n                }\n            }\n        });\n    }\n    loadHistory() {\n        var that = this;\n        var config = that.recorder.config;\n        return Ajax.call([{\n            methodname: 'tiny_poodll_history_get_items',\n            args: {'recordertype': config.recorder},\n            async: false, //this means the function is blocking\n        }])[0];\n    }\n\n    /**\n     * Creates the media html5 tags based on the recorder type.\n     *\n     * @method saveHistoryItem\n     * @param  {string} mediaurl The url of the media file\n     * @param  {string} mediafilename The name of the media file\n     * @param  {string} sourceurl The url of the source file\n     * @param  {string} sourcemimetype The mimetype of the source file\n     */\n    saveHistoryItem(mediaurl, mediafilename, sourceurl, sourcemimetype) {\n        Log.debug(\"ajax saving history item\");\n        var that=this;\n        return Ajax.call([{\n            methodname: 'tiny_poodll_history_create',\n            args: {\n                recordertype: that.recorder.config.recorder,\n                mediafilename: mediafilename,\n                sourceurl: sourceurl,\n                mediaurl: mediaurl,\n                sourcemimetype: sourcemimetype,\n                subtitling: that.recorder.config.subtitling ? 1 : 0,\n                subtitleurl: that.recorder.config.subtitling ? mediaurl + '.vtt' : '',\n            },\n        }])[0];\n    }\n\n    /**\n     * Creates the media html5 tags based on the recorder type.\n     *\n     * @method loadHistoryPreview\n     * @param  {integer} historyid The id of the history item\n     * @param  {object} clickedLink The link that was clicked\n     */\n    loadHistoryPreview(historyid, clickedLink){\n        var that=this;\n\n        var historyItem = this.fetchHistoryItem(historyid);\n        var context = {\n            data: historyItem,\n            isVideo: that.recorder.config.recorder === 'video' || that.recorder.config.recorder === 'screen'\n        };\n        Templates.render('tiny_poodll/historypreview', context)\n            .then(function (html, js) {\n                ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: that.strings.previewitem,\n                    body: html,\n                }, clickedLink )\n                    .then(function(modal) {\n                        modal.setSaveButtonText(that.strings.insertitem);\n                        var root = modal.getRoot();\n                        root.on(ModalEvents.cancel, function() {modal.hide();});\n                        root.on(ModalEvents.save, function() {\n                                that.recorder.doInsert(historyItem.mediaurl, historyItem.mediafilename,\n                                historyItem.sourceurl, historyItem.sourcemimetype);\n                                modal.hide();\n                        });\n                        modal.show();\n                    });\n            }).fail(function (ex) {\n            Notification.exception(ex);\n        });\n    }\n\n    /**\n     * Inserts the histopry item\n     *\n     * @method insertHistoryItem\n     * @param  {integer} historyid The id of the history item\n     */\n   insertHistoryItem(historyid) {\n        var that=this;\n        var historyItemData = this.fetchHistoryItem(historyid);\n        var context = {\n            data: historyItemData.responses,\n            isVideo: that.recorder.config.recorder === 'video' || that.recorder.config.recorder === 'screen'\n        };\n        Templates.render('tiny_poodll/historypreview', context)\n            .then(function (html, js) {\n                Templates.replaceNodeContents('div[data-field=\"history\"]', html, js);\n            }).fail(function (ex) {\n            Notification.exception(ex);\n        });\n\n    }\n\n    /**\n     * Fetches a history item from the itemdata array\n     * @method fetchHistoryItem\n     * @param {integer} historyid The id of the history item\n     * @returns {*}\n     */\n   fetchHistoryItem(historyid) {\n       return this.itemdata[historyid];\n       /*\n        return Ajax.call([{\n            methodname: 'tiny_poodll_history_get_item',\n            args: {'id': historyid}\n        }])[0];\n        */\n\n    }\n}\n"],"names":["constructor","recorder","that","this","config","loadHistory","then","historyitems","Array","isArray","responses","forEach","item","dateToFormat","dateObj","hasOwnProperty","displaydateofentry","dateofentry","Date","getUTCMonth","getUTCDate","getUTCFullYear","displayfiletitle","filetitle","substring","filetitledisplaylength","editablefield","JSON","parse","editabletitle","itemdata","id","context","data","Templates","render","html","js","replaceNodeContents","initDataTables","registerEvents","initStrings","component","done","s","i","strings","previewitem","deleteitem","confirmdelete","loading","insertitem","require","$","datatable","table","DataTable","debug","document","getElementById","addEventListener","event","target","dataset","actionType","clickedLink","ModalFactory","create","type","types","SAVE_CANCEL","title","body","modal","setSaveButtonText","root","getRoot","on","ModalEvents","cancel","hide","save","historyRow","closest","previousElementSibling","historyItemId","historyId","childHistoryRow","Ajax","call","methodname","args","style","display","show","historyItem","fetchHistoryItem","doInsert","mediaurl","mediafilename","sourceurl","sourcemimetype","loadHistoryPreview","querySelector","classList","contains","tr","row","child","isShown","remove","rowdata","add","async","saveHistoryItem","recordertype","subtitling","subtitleurl","historyid","isVideo","fail","ex","Notification","exception","insertHistoryItem"],"mappings":"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"}