{"version":3,"file":"history.min.js","sources":["../src/history.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Poodll - audio recorder configuration.\n *\n * @module      tiny_poodll/audio_recorder\n * @copyright   2023 Justin Hunt <justin@poodll.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\nimport * as Ajax from 'core/ajax';\nimport {component, CSS, INSERTMETHOD, SKIN} from \"./common\";\nimport * as Templates from 'core/templates';\nimport * as Notification from 'core/notification';\nimport ModalSaveCancel from 'core/modal_save_cancel';\nimport * as ModalFactory from 'core/modal_factory';\nimport * as ModalEvents from 'core/modal_events';\nimport Log from 'core/log';\nimport {get_strings as getStrings} from \"core/str\";\n\nexport default class {\n\n    itemdata= [];\n    component = 'tiny_poodll';\n    strings = {};\n\n    /**\n     * Constructor for the Tiny Poodll Recorder History Tab\n     *\n     * @param {recorder} recorder The recorder this history is associated with\n     */\n    constructor(recorder) {\n        var that =this;\n        var config = recorder.config;\n        var processHistoryItems = function (historyitems) {\n            /**\n             * Takes a mysql unix timestamp (in seconds) and converts to a display date.\n             *\n             * @method _formatUnixDate\n             * @param {integer} dateToFormat Date to format\n             */\n            function _formatUnixDate(dateToFormat) {\n                var dateObj = new Date(dateToFormat * 1000);\n\n                var month = dateObj.getUTCMonth() + 1;\n                var day = dateObj.getUTCDate();\n                var year = dateObj.getUTCFullYear();\n\n                return month + \"/\" + day + \"/\" + year;\n            }\n\n            if (Array.isArray(historyitems.responses)) {\n                historyitems.responses.forEach(function(item){\n                    if(item.hasOwnProperty('dateofentry')) {\n                        item.displaydateofentry = _formatUnixDate(item.dateofentry);\n                        item.displayfiletitle = item.filetitle.substring(0, config.filetitledisplaylength) + '...';\n                        item.editablefield = [JSON.parse(item.editabletitle)];\n                        that.itemdata[item.id] = item;\n                    }\n                });\n            }\n\n            var context = {data: historyitems.responses};\n            return Templates.render('tiny_poodll/historypanel', context);\n\n        };\n\n        this.recorder = recorder;\n\n        //load the elements and new table\n        this.loadHistory()\n            .then(processHistoryItems)\n            .then(function (html, js) {\n                Templates.replaceNodeContents('div[data-field=\"history\"]', html, js);\n                that.initDataTables();\n                that.registerEvents();\n        });\n        this.initStrings();\n    }\n\n    initStrings() {\n        var that =this;\n        getStrings([\n            { \"key\": \"previewitem\", \"component\": this.component },\n            { \"key\": \"deleteitem\", \"component\": this.component },\n            { \"key\": \"confirmdelete\", \"component\": this.component },\n            { \"key\": \"loading\", \"component\": this.component },\n            { \"key\": \"insertitem\", \"component\": this.component }\n        ]).done(function (s) {\n            var i = 0;\n            that.strings.previewitem = s[i++];\n            that.strings.deleteitem = s[i++];\n            that.strings.confirmdelete = s[i++];\n            that.strings.loading = s[i++];\n            that.strings.insertitem = s[i++];\n        });\n    }\n\n    initDataTables() {\n        var that=this;\n        require(\n            ['jquery', 'https://cdn.datatables.net/1.13.5/js/jquery.dataTables.min.js',], function ($, datatable) {\n                that.table = $('#' + that.recorder.elementid + '_tiny_poodll_history .tiny_poodll_history_table').DataTable();\n            });\n    }\n\n   registerEvents() {\n       var that = this;\n       Log.debug('history events registering against ' + '#' + that.recorder.elementid + '_tiny_poodll_history');\n\n       // Handle the removal of an item from the history table\n       document.querySelector('#' + that.recorder.elementid + '_tiny_poodll_history .tiny_poodll_history_table').addEventListener('click', function (event) {\n           const target = event.target;\n           switch (target.dataset.actiontype) {\n               case 'delete':\n                   event.preventDefault();\n                   Log.debug('delete clicked');\n                   that.loadHistoryDelete(target.dataset.historyid, target);\n                   break;\n\n               case 'add':\n                   event.preventDefault();\n                   Log.debug('insert clicked');\n                   const historyItem = that.fetchHistoryItem(target.dataset.historyid);\n                   that.recorder.doInsert(historyItem.mediaurl, historyItem.mediafilename,\n                       historyItem.sourceurl, historyItem.sourcemimetype);\n                   break;\n\n               case 'preview':\n                   event.preventDefault();\n                   Log.debug('preview clicked');\n                   that.loadHistoryPreview(target.dataset.historyid, target);\n                   break;\n\n               case \"togglerow\":\n                   event.preventDefault();\n                   Log.debug('details control clicked');\n                   const tr = target.closest('tr');\n                   const row = that.table.row(tr);\n                   if (row.child.isShown()) {\n                       row.child.hide();\n                       tr.classList.remove('shown');\n                   } else {\n                       const rowdata = {\"name\": \"id\", \"value\": tr.dataset.historyid};\n                       Templates.render('tiny_poodll/historyrow', rowdata).then(\n                           function (html, js) {\n                               row.child(html).show();\n                               tr.classList.add('shown');\n                           }\n                       );\n                   }\n                   break;\n\n               default:\n\n                   // If the clicked element is an <i> tag and has \"data-actiontype the icon should click like the parent\n                   // why the event does not bubble up, I dont know, I guess its datatables, so we force that here\n                       if (target.tagName === 'I' && target.parentElement.hasAttribute('data-actiontype')) {\n                           event.preventDefault();\n                           // Force the event to propagate\n                           target.parentElement.click();\n                       }//end of if\n           }//end of  switch\n       });\n   } //End of register events\n\n\n    loadHistory() {\n        var that = this;\n        var config = that.recorder.config;\n        return Ajax.call([{\n            methodname: 'tiny_poodll_history_get_items',\n            args: {'recordertype': config.recorder},\n            async: false, //this means the function is blocking\n        }])[0];\n    }\n\n    /**\n     * Creates the media html5 tags based on the recorder type.\n     *\n     * @method saveHistoryItem\n     * @param  {string} mediaurl The url of the media file\n     * @param  {string} mediafilename The name of the media file\n     * @param  {string} sourceurl The url of the source file\n     * @param  {string} sourcemimetype The mimetype of the source file\n     */\n    saveHistoryItem(mediaurl, mediafilename, sourceurl, sourcemimetype) {\n        Log.debug(\"ajax saving history item\");\n        var that=this;\n        return Ajax.call([{\n            methodname: 'tiny_poodll_history_create',\n            args: {\n                recordertype: that.recorder.config.recorder,\n                mediafilename: mediafilename,\n                sourceurl: sourceurl,\n                mediaurl: mediaurl,\n                sourcemimetype: sourcemimetype,\n                subtitling: that.recorder.config.subtitling ? 1 : 0,\n                subtitleurl: that.recorder.config.subtitling ? mediaurl + '.vtt' : '',\n            },\n        }])[0];\n    }\n    /**\n     * Creates the deletge modal and deletes from history if \"delete\" is pressed\n     *\n     * @method loadHistoryDelete\n     * @param  {integer} historyid The id of the history item\n     * @param  {object} clickedLink The link that was clicked\n     */\n    loadHistoryDelete(historyid, clickedLink) {\n        var that = this;\n\n        const modal = ModalSaveCancel.create({\n            title: that.strings.deleteitem,\n            body: that.strings.confirmdelete,\n            show: true,\n            buttons: {save: that.strings.deleteitem},\n            removeOnClose: true,\n        }).then(function (modal) {\n            const root = modal.getRoot();\n            root.on(ModalEvents.cancel, function () {\n                modal.hide();\n            });\n            root.on(ModalEvents.save, function () {\n                const historyItemId = clickedLink.dataset.historyid;\n                const therow = document.querySelector('tr[data-historyid=\"' + historyItemId + '\"]');\n                var dtparentrow = that.table.row(therow);\n\n                if (!dtparentrow.node()) {\n                    Log.debug('Row is not part of the DataTables instance.');\n                    dtparentrow = that.table.row('tr[data-historyid=\"' + historyItemId + '\"]');\n                    if (!dtparentrow.node()) {\n                        Log.debug('Row is still not part of the DataTables instance.');\n                        return;\n                    }\n                }\n\n                Ajax.call([{\n                    methodname: 'tiny_poodll_history_archive',\n                    args: {'id': historyItemId},\n                    done: function () {\n                        // Remove the parent row from the DataTable and redraw\n                        dtparentrow.remove().draw();\n                    }\n                }]);\n            });\n        });\n    }\n\n    /**\n     * Creates the preview modal and inserts the media if \"insert\" is pressed\n     *\n     * @method loadHistoryPreview\n     * @param  {integer} historyid The id of the history item\n     * @param  {object} clickedLink The link that was clicked\n     */\n    loadHistoryPreview(historyid, clickedLink) {\n        var that = this;\n\n        var historyItem = this.fetchHistoryItem(historyid);\n        var context = {\n            data: historyItem,\n            isVideo: that.recorder.config.recorder === 'video' || that.recorder.config.recorder === 'screen'\n        };\n        Templates.render('tiny_poodll/historypreview', context)\n            .then(function (html, js) {\n\n                const modal = ModalSaveCancel.create({\n                    title: that.strings.previewitem,\n                    body: html,\n                    show: true,\n                    buttons: {save: that.strings.insertitem},\n                    removeOnClose: true,\n                }).then(function (modal) {\n                    const root = modal.getRoot();\n                    root.on(ModalEvents.cancel, function () {\n                        modal.hide();\n                    });\n                    root.on(ModalEvents.save, function () {\n                        that.recorder.doInsert(\n                            historyItem.mediaurl,\n                            historyItem.mediafilename,\n                            historyItem.sourceurl,\n                            historyItem.sourcemimetype\n                        );\n                    });\n\n                });\n            }).fail(function (ex) {\n            Notification.exception(ex);\n        });\n    }\n\n\n    /**\n     * Fetches a history item from the itemdata array\n     * @method fetchHistoryItem\n     * @param {integer} historyid The id of the history item\n     * @returns {*}\n     */\n   fetchHistoryItem(historyid) {\n       return this.itemdata[historyid];\n       /*\n        return Ajax.call([{\n            methodname: 'tiny_poodll_history_get_item',\n            args: {'id': historyid}\n        }])[0];\n        */\n\n    }\n}\n"],"names":["constructor","recorder","that","this","config","loadHistory","then","historyitems","Array","isArray","responses","forEach","item","dateToFormat","dateObj","hasOwnProperty","displaydateofentry","dateofentry","Date","getUTCMonth","getUTCDate","getUTCFullYear","displayfiletitle","filetitle","substring","filetitledisplaylength","editablefield","JSON","parse","editabletitle","itemdata","id","context","data","Templates","render","html","js","replaceNodeContents","initDataTables","registerEvents","initStrings","component","done","s","i","strings","previewitem","deleteitem","confirmdelete","loading","insertitem","require","$","datatable","table","elementid","DataTable","debug","document","querySelector","addEventListener","event","target","dataset","actiontype","preventDefault","loadHistoryDelete","historyid","historyItem","fetchHistoryItem","doInsert","mediaurl","mediafilename","sourceurl","sourcemimetype","loadHistoryPreview","tr","closest","row","child","isShown","hide","classList","remove","rowdata","show","add","tagName","parentElement","hasAttribute","click","Ajax","call","methodname","args","async","saveHistoryItem","recordertype","subtitling","subtitleurl","clickedLink","ModalSaveCancel","create","title","body","buttons","save","removeOnClose","modal","root","getRoot","on","ModalEvents","cancel","historyItemId","therow","dtparentrow","node","draw","isVideo","fail","ex","Notification","exception"],"mappings":"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"}