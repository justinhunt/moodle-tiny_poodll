{"version":3,"file":"options.min.js","sources":["../src/options.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Options helper for the Moodle tiny_poodll plugin.\n *\n * @module      plugintype_pluginname/options\n * @copyright   2023 Justin Hunt <justin@poodll.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getPluginOptionName} from 'editor_tiny/options';\nimport {pluginName} from './common';\n\n// Helper variables for the option names.\nconst cp_cansubtitleName = getPluginOptionName(pluginName, 'cp_cansubtitle');\nconst cp_tokenName = getPluginOptionName(pluginName, 'cp_token');\nconst cp_regionName = getPluginOptionName(pluginName, 'cp_region');\nconst cp_expiredaysName = getPluginOptionName(pluginName, 'cp_expiredays');\nconst cp_languageName = getPluginOptionName(pluginName, 'cp_language');\nconst cp_transcodeName = getPluginOptionName(pluginName, 'cp_transcode');\nconst cp_audioskinName = getPluginOptionName(pluginName, 'cp_audioskin');\nconst cp_videoskinName = getPluginOptionName(pluginName, 'cp_videoskin');\nconst cp_fallbackName = getPluginOptionName(pluginName, 'cp_fallback');\nconst cp_ownerName = getPluginOptionName(pluginName, 'cp_owner');\nconst subtitleaudiobydefaultName = getPluginOptionName(pluginName, 'subtitleaudiobydefault');\nconst subtitlevideobydefaultName = getPluginOptionName(pluginName, 'subtitlevideobydefault');\nconst disabledName = getPluginOptionName(pluginName, 'disabled');\nconst filetitle_displaylengthName = getPluginOptionName(pluginName, 'filetitle_displaylength');\nconst showhistoryName = getPluginOptionName(pluginName, 'showhistory');\nconst showoptionsName = getPluginOptionName(pluginName, 'showoptions');\nconst showuploadName = getPluginOptionName(pluginName, 'showupload');\nconst showexpiredaysName = getPluginOptionName(pluginName, 'showexpiredays');\n\n/**\n * Options registration function.\n *\n * @param {tinyMCE} editor\n */\nexport const register = (editor) => {\n    const registerOption = editor.options.register;\n\n    // For each option, register it with the editor.\n    // Valid type are defined in https://www.tiny.cloud/docs/tinymce/6/apis/tinymce.editoroptions/\n    registerOption(cp_cansubtitleName, {\n        processor: 'int',\n    });\n    registerOption(cp_tokenName, {\n        processor: 'string',\n    });\n    registerOption(cp_regionName, {\n        processor: 'string',\n    });\n    registerOption(cp_expiredaysName, {\n        processor: 'int',\n    });\n    registerOption(cp_languageName, {\n        processor: 'string',\n    });\n    registerOption(cp_transcodeName, {\n        processor: 'int',\n    });\n    registerOption(cp_audioskinName, {\n        processor: 'string',\n    });\n    registerOption(cp_videoskinName, {\n        processor: 'string',\n    });\n    registerOption(cp_fallbackName, {\n        processor: 'int',\n    });\n    registerOption(cp_ownerName, {\n        processor: 'string',\n    });\n    registerOption(subtitleaudiobydefaultName, {\n        processor: 'int',\n    });\n    registerOption(subtitlevideobydefaultName, {\n        processor: 'int',\n    });\n    registerOption(disabledName, {\n        processor: 'int',\n    });\n    registerOption(filetitle_displaylengthName, {\n        processor: 'int',\n    });\n    registerOption(showhistoryName, {\n        processor: 'int',\n    });\n    registerOption(showoptionsName, {\n        processor: 'int',\n    });\n    registerOption(showuploadName, {\n        processor: 'int',\n    });\n    registerOption(showexpiredaysName, {\n        processor: 'int',\n    });\n};\n\n/**\n * Fetch the cp_cansubtitle value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the cp_cansubtitle option\n */\nexport const getCp_cansubtitle = (editor) => editor.options.get(cp_cansubtitleName);\n\n/**\n * Fetch the cp_token value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the cp_token option\n */\nexport const getCp_token = (editor) => editor.options.get(cp_tokenName);\n\n/**\n * Fetch the cp_region value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the cp_region option\n */\nexport const getCp_region = (editor) => editor.options.get(cp_regionName);\n\n/**\n * Fetch the cp_expiredays value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the cp_expiredays option\n */\nexport const getCp_expiredays = (editor) => editor.options.get(cp_expiredaysName);\n\n/**\n * Fetch the cp_language value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the cp_language option\n */\nexport const getCp_language = (editor) => editor.options.get(cp_languageName);\n\n/**\n * Fetch the cp_transcode value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the cp_transcode option\n */\nexport const getCp_transcode = (editor) => editor.options.get(cp_transcodeName);\n\n/**\n * Fetch the cp_audioskin value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the cp_audioskin option\n */\nexport const getCp_audioskin = (editor) => editor.options.get(cp_audioskinName);\n\n/**\n * Fetch the cp_videoskin value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the cp_videoskin option\n */\nexport const getCp_videoskin = (editor) => editor.options.get(cp_videoskinName);\n\n/**\n * Fetch the cp_fallback value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the cp_fallback option\n */\nexport const getCp_fallback = (editor) => editor.options.get(cp_fallbackName);\n\n/**\n * Fetch the cp_owner value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the cp_owner option\n */\nexport const getCp_owner = (editor) => editor.options.get(cp_ownerName);\n\n/**\n * Fetch the subtitleaudiobydefault value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the subtitleaudiobydefault option\n */\nexport const getSubtitleaudiobydefault = (editor) => editor.options.get(subtitleaudiobydefaultName);\n\n/**\n * Fetch the subtitlevideobydefault value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the subtitlevideobydefault option\n */\nexport const getSubtitlevideobydefault = (editor) => editor.options.get(subtitlevideobydefaultName);\n\n/**\n * Fetch the disabled value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the disabled option\n */\nexport const getDisabled = (editor) => editor.options.get(disabledName);\n\n/**\n * Fetch the filetitle_displaylength value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the filetitle_displaylength option\n */\nexport const getFiletitle_displaylength = (editor) => editor.options.get(filetitle_displaylengthName);\n\n/**\n * Fetch the showhistory value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the showhistory option\n */\nexport const getShowhistory = (editor) => editor.options.get(showhistoryName);\n\n/**\n * Fetch the showoptions value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the showoptions option\n */\nexport const getShowoptions = (editor) => editor.options.get(showoptionsName);\n\n/**\n * Fetch the showupload value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the showupload option\n */\nexport const getShowupload = (editor) => editor.options.get(showuploadName);\n\n/**\n * Fetch the showexpiredays value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the showexpiredays option\n */\nexport const getShowexpiredays = (editor) => editor.options.get(showexpiredaysName);\n"],"names":["cp_cansubtitleName","pluginName","cp_tokenName","cp_regionName","cp_expiredaysName","cp_languageName","cp_transcodeName","cp_audioskinName","cp_videoskinName","cp_fallbackName","cp_ownerName","subtitleaudiobydefaultName","subtitlevideobydefaultName","disabledName","filetitle_displaylengthName","showhistoryName","showoptionsName","showuploadName","showexpiredaysName","editor","registerOption","options","register","processor","get"],"mappings":";;;;;;;;MA2BMA,oBAAqB,gCAAoBC,mBAAY,kBACrDC,cAAe,gCAAoBD,mBAAY,YAC/CE,eAAgB,gCAAoBF,mBAAY,aAChDG,mBAAoB,gCAAoBH,mBAAY,iBACpDI,iBAAkB,gCAAoBJ,mBAAY,eAClDK,kBAAmB,gCAAoBL,mBAAY,gBACnDM,kBAAmB,gCAAoBN,mBAAY,gBACnDO,kBAAmB,gCAAoBP,mBAAY,gBACnDQ,iBAAkB,gCAAoBR,mBAAY,eAClDS,cAAe,gCAAoBT,mBAAY,YAC/CU,4BAA6B,gCAAoBV,mBAAY,0BAC7DW,4BAA6B,gCAAoBX,mBAAY,0BAC7DY,cAAe,gCAAoBZ,mBAAY,YAC/Ca,6BAA8B,gCAAoBb,mBAAY,2BAC9Dc,iBAAkB,gCAAoBd,mBAAY,eAClDe,iBAAkB,gCAAoBf,mBAAY,eAClDgB,gBAAiB,gCAAoBhB,mBAAY,cACjDiB,oBAAqB,gCAAoBjB,mBAAY,oCAOlCkB,eACfC,eAAiBD,OAAOE,QAAQC,SAItCF,eAAepB,mBAAoB,CAC/BuB,UAAW,QAEfH,eAAelB,aAAc,CACzBqB,UAAW,WAEfH,eAAejB,cAAe,CAC1BoB,UAAW,WAEfH,eAAehB,kBAAmB,CAC9BmB,UAAW,QAEfH,eAAef,gBAAiB,CAC5BkB,UAAW,WAEfH,eAAed,iBAAkB,CAC7BiB,UAAW,QAEfH,eAAeb,iBAAkB,CAC7BgB,UAAW,WAEfH,eAAeZ,iBAAkB,CAC7Be,UAAW,WAEfH,eAAeX,gBAAiB,CAC5Bc,UAAW,QAEfH,eAAeV,aAAc,CACzBa,UAAW,WAEfH,eAAeT,2BAA4B,CACvCY,UAAW,QAEfH,eAAeR,2BAA4B,CACvCW,UAAW,QAEfH,eAAeP,aAAc,CACzBU,UAAW,QAEfH,eAAeN,4BAA6B,CACxCS,UAAW,QAEfH,eAAeL,gBAAiB,CAC5BQ,UAAW,QAEfH,eAAeJ,gBAAiB,CAC5BO,UAAW,QAEfH,eAAeH,eAAgB,CAC3BM,UAAW,QAEfH,eAAeF,mBAAoB,CAC/BK,UAAW,oCAUeJ,QAAWA,OAAOE,QAAQG,IAAIxB,yCAQpCmB,QAAWA,OAAOE,QAAQG,IAAItB,oCAQ7BiB,QAAWA,OAAOE,QAAQG,IAAIrB,yCAQ1BgB,QAAWA,OAAOE,QAAQG,IAAIpB,2CAQhCe,QAAWA,OAAOE,QAAQG,IAAInB,0CAQ7Bc,QAAWA,OAAOE,QAAQG,IAAIlB,2CAQ9Ba,QAAWA,OAAOE,QAAQG,IAAIjB,2CAQ9BY,QAAWA,OAAOE,QAAQG,IAAIhB,0CAQ/BW,QAAWA,OAAOE,QAAQG,IAAIf,sCAQjCU,QAAWA,OAAOE,QAAQG,IAAId,iDAQhBS,QAAWA,OAAOE,QAAQG,IAAIb,+DAQ9BQ,QAAWA,OAAOE,QAAQG,IAAIZ,iDAQ5CO,QAAWA,OAAOE,QAAQG,IAAIX,kDAQfM,QAAWA,OAAOE,QAAQG,IAAIV,qDAQ1CK,QAAWA,OAAOE,QAAQG,IAAIT,yCAQ9BI,QAAWA,OAAOE,QAAQG,IAAIR,wCAQ/BG,QAAWA,OAAOE,QAAQG,IAAIP,2CAQ1BE,QAAWA,OAAOE,QAAQG,IAAIN"}