{"version":3,"file":"options.min.js","sources":["../src/options.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Options helper for the Moodle tiny_poodll plugin.\n *\n * @module      plugintype_pluginname/options\n * @copyright   2023 Justin Hunt <justin@poodll.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getPluginOptionName} from 'editor_tiny/options';\nimport {pluginName} from './common';\n\n// Helper variables for the option names.\nconst cloudpoodllName = getPluginOptionName(pluginName, 'cloudpoodll');\nconst audioallowedName = getPluginOptionName(pluginName, 'audioallowed');\nconst videoallowedName = getPluginOptionName(pluginName, 'videoallowed');\nconst screenallowedName = getPluginOptionName(pluginName, 'screenallowed');\nconst widgetsallowedName = getPluginOptionName(pluginName, 'widgetsallowed');\n\n/**\n * Options registration function.\n *\n * @param {tinyMCE} editor\n */\nexport const register = (editor) => {\n    const registerOption = editor.options.register;\n\n    // For each option, register it with the editor.\n    // Valid type are defined in https://www.tiny.cloud/docs/tinymce/6/apis/tinymce.editoroptions/\n    registerOption(cloudpoodllName, {\n        processor: 'object',\n    });\n\n    registerOption(audioallowedName, {\n        processor: 'boolean',\n        default: false\n    });\n    registerOption(videoallowedName, {\n        processor: 'boolean',\n        default: false\n    });\n    registerOption(screenallowedName, {\n        processor: 'boolean',\n        default: false\n    });\n    registerOption(widgetsallowedName, {\n        processor: 'boolean',\n        default: false\n    });\n};\n\n/**\n * Fetch the requested datavalue\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the audioallowed option\n */\nexport const getConfig = (editor) => editor.options.get(cloudpoodllName);\n\n\n/**\n * Fetch the isAllowed value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @param {string} rec_type type one of audio/video/screen/widgets\n * @returns {object} The value of the audioallowed option\n */\nexport const isAllowed = function(editor,rec_type) {\n    switch(rec_type){\n        case 'audio':\n            return editor.options.get(audioallowedName);\n        case 'video':\n            return editor.options.get(videoallowedName);\n        case 'screen':\n            return editor.options.get(screenallowedName);\n        case 'widgets':\n            return editor.options.get(widgetsallowedName);\n        default:\n            return false;\n    }\n};\n"],"names":["cloudpoodllName","pluginName","audioallowedName","videoallowedName","screenallowedName","widgetsallowedName","editor","registerOption","options","register","processor","default","get","rec_type"],"mappings":";;;;;;;;MA2BMA,iBAAkB,gCAAoBC,mBAAY,eAClDC,kBAAmB,gCAAoBD,mBAAY,gBACnDE,kBAAmB,gCAAoBF,mBAAY,gBACnDG,mBAAoB,gCAAoBH,mBAAY,iBACpDI,oBAAqB,gCAAoBJ,mBAAY,oCAOlCK,eACfC,eAAiBD,OAAOE,QAAQC,SAItCF,eAAeP,gBAAiB,CAC5BU,UAAW,WAGfH,eAAeL,iBAAkB,CAC7BQ,UAAW,UACXC,SAAS,IAEbJ,eAAeJ,iBAAkB,CAC7BO,UAAW,UACXC,SAAS,IAEbJ,eAAeH,kBAAmB,CAC9BM,UAAW,UACXC,SAAS,IAEbJ,eAAeF,mBAAoB,CAC/BK,UAAW,UACXC,SAAS,wBASSL,QAAWA,OAAOE,QAAQI,IAAIZ,oCAU/B,SAASM,OAAOO,iBAC9BA,cACE,eACMP,OAAOE,QAAQI,IAAIV,sBACzB,eACMI,OAAOE,QAAQI,IAAIT,sBACzB,gBACMG,OAAOE,QAAQI,IAAIR,uBACzB,iBACME,OAAOE,QAAQI,IAAIP,mCAEnB"}