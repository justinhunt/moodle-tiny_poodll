{"version":3,"file":"rec_audio.min.js","sources":["../src/rec_audio.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Poodll - audio recorder configuration.\n *\n * @module      tiny_poodll/audio_recorder\n * @copyright   2023 Justin Hunt <justin@poodll.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\nimport Pending from 'core/pending';\nimport {getCloudpoodll} from './options';\nimport uploadFile from 'editor_tiny/uploader';\nimport {add as addToast} from 'core/toast';\nimport * as ModalEvents from 'core/modal_events';\nimport * as ModalFactory from 'core/modal_factory';\nimport * as Templates from 'core/templates';\nimport {saveCancelPromise} from 'core/notification';\nimport {prefetchStrings, prefetchTemplates} from 'core/prefetch';\nimport Modal from \"./modal\";\nimport ModalRegistry from 'core/modal_registry';\n\nimport {\n    component,\n    INSERTMETHOD,\n    LANGUAGE,\n    CSS,\n    SKIN\n} from './common';\n\n/**\n * The Poodll base class for audio, video, and any other future types\n */\nexport default class {\n\n    /**\n     * Constructor for the Tiny Poodll Recorder\n     *\n     * @param {TinyMCE} editor The Editor to which the content will be inserted\n     * @param {Modal} modal The Moodle Modal that contains the interface used for recording\n     * @param {config} config The data passed to template and used internally for managing plugin state\n     */\n    constructor(editor, modal, config) {\n        this.ready = false;\n/*\n        if (!this.checkAndWarnAboutBrowserCompatibility()) {\n            return;\n        }\n*/\n        this.editor = editor;\n        this.config = config;//getData(editor).params;\n        this.modal = modal;\n        this.modalRoot = modal.getRoot()[0];\n   //     this.startStopButton = this.modalRoot.querySelector('button[data-action=\"startstop\"]');\n   //     this.uploadButton = this.modalRoot.querySelector('button[data-action=\"upload\"]');\n\n        // Disable the record button untilt he stream is acquired.\n    //    this.setRecordButtonState(false);\n\n    //    this.player = this.configurePlayer();\n        this.registerEventListeners();\n        this.ready = true;\n\n      //  this.captureUserMedia();\n      //  this.prefetchContent();\n    }\n\n    /**\n     * Close the modal and stop recording.\n     */\n    close() {\n        // Closing the modal will destroy it and remove it from the DOM.\n        // It will also stop the recording via the hidden Modal Event.\n        this.modal.hide();\n    }\n\n    /**\n     * Register event listeners for the modal.\n     */\n    registerEventListeners() {\n        var that =this;\n        const $root = this.modal.getRoot();\n        const root = $root[0];\n        //get a handle on the controls we need to work with\n        var controls={};\n        const recorders = root.querySelectorAll('.' + CSS.CP_SWAP);\n\n        /*\n        $root.on(ModalEvents.save, (event, modal) => {\n            handleDialogueSubmission(editor, modal, data);\n        });\n        */\n\n        root.addEventListener('click', (e) => {\n            const cbox = e.target.closest('[type=\"checkbox\"]');\n            if (cbox) {\n                switch (cbox.id) {\n                    case CSS.SUBTITLE_CHECKBOX:\n                        //update recorder subtitle setting\n                        if (cbox.get('checked')) {\n                            recorders.forEach((recorder) => {\n                                recorder.setAttribute('data-transcribe', '1');\n                                recorder.setAttribute('data-subtitle', '1');\n                                recorder.setAttribute('data-alreadyparsed', 'false');\n                                recorder.innerHTML = \"\";\n                            });\n                            controls.subtitling = true;\n                        } else {\n                            recorders.forEach((recorder) => {\n                                recorder.setAttribute('data-transcribe', '0');\n                                recorder.setAttribute('data-subtitle', '0');\n                                recorder.setAttribute('data-alreadyparsed', 'false');\n                                recorder.innerHTML = \"\";\n                            });\n                            controls.subtitling = false;\n                        }\n                        //reload the recorders\n                        that.loadRecorders();\n                        break;\n                    case CSS.MEDIAINSERT_CHECKBOX:\n                        //update recorder subtitle setting\n                        if (cbox.get('checked')) {\n                            controls.insertmethod = INSERTMETHOD.TAGS;\n                        } else {\n                            controls.insertmethod = INSERTMETHOD.LINK;\n                        }\n                        break;\n                }\n            }\n        });\n        root.addEventListener('change', (e) => {\n            const dropdown = e.target.closest('select');\n            if(dropdown){\n                switch(dropdown.id){\n                    case CSS.LANG_SELECT:\n                        CLOUDPOODLL.language =dropdown.get('value');\n                        recorders.forEach((recorder) => {\n                            recorder.setAttribute('data-language', CLOUDPOODLL.language);\n                            recorder.setAttribute('data-alreadyparsed', 'false');\n                            recorder.innerHTML=\"\";\n                        });\n                        that.loadRecorders();\n                        break;\n                    case CSS.EXPIREDAYS_SELECT:\n                        //do something\n                        recorders.forEach((recorder) => {\n                            recorder.setAttribute('data-expiredays', CLOUDPOODLL.expiredays);\n                            recorder.setAttribute('data-alreadyparsed', 'false');\n                            recorder.innerHTML=\"\";\n                        });\n                        that.loadRecorders();\n                }\n\n            }\n\n        });\n\n        /*\n        this.modalRoot.addEventListener('click', this.handleModalClick.bind(this));\n        this.modal.getRoot().on(ModalEvents.outsideClick, this.outsideClickHandler.bind(this));\n        this.modal.getRoot().on(ModalEvents.hidden, () => {\n            this.cleanupStream();\n            this.requestRecordingStop();\n        });\n\n         */\n    }\n\n\n    /**\n     * Display the widgets dialog\n     *\n     * @method _displayDialogue\n     * @private\n     */\n    displayWidgetsDialogue(e, clickedicon) {\n        e.preventDefault();\n        var width = 800;\n\n        var dialogue = this.getDialogue({\n            headerContent: M.util.get_string('dialogtitle', COMPONENTNAME),\n            width: width + 'px',\n            focusAfterHide: clickedicon\n        });\n        //dialog doesn't detect changes in width without this\n        //if you reuse the dialog, this seems necessary\n        if (dialogue.width !== width + 'px') {\n            dialogue.set('width', width + 'px');\n        }\n\n\n        //create content container\n        var bodycontent = Y.Node.create('<div></div>');\n\n        //create and append header\n        var template = Y.Handlebars.compile(BUTTONSHEADERTEMPLATE),\n            content = Y.Node.create(template({\n                headertext: M.util.get_string('chooseinsert', COMPONENTNAME)\n            }));\n        bodycontent.append(content);\n\n        //get button nodes\n        var buttons = this._getButtonsForNames(clickedicon);\n\n        Y.Array.each(buttons, function (button) {\n            bodycontent.append(button);\n        }, bodycontent);\n\n        //set to bodycontent\n        dialogue.set('bodyContent', bodycontent);\n        dialogue.show();\n\n        this.markUpdated();\n    }\n\n    getButtonsForNames(clickedicon) {\n        var allcontent = [];\n        Y.Array.each(CLOUDPOODLL.names, function (thename, currentindex) {\n            //loop start\n            var template = Y.Handlebars.compile(BUTTONTEMPLATE),\n                content = Y.Node.create(template({\n                    elementid: this.get('host').get('elementid'),\n                    name: thename,\n                    templateindex: currentindex\n                }));\n            this._form = content;\n            content.one('.' + CSS.NAMEBUTTON + '_' + currentindex).on('click', this._showTemplateForm, this, currentindex);\n            allcontent.push(content);\n            //loop end\n        }, this);\n\n        return allcontent;\n    }\n\n    /**\n     * Return the widget dialogue content for the tool, attaching any required\n     * events.\n     *\n     * @method _getSubmitButtons\n     * @return {Node} The content to place in the dialogue.\n     * @private\n     */\n    getSubmitButtons(templateindex) {\n\n        var template = Y.Handlebars.compile(SUBMITTEMPLATE),\n\n            content = Y.Node.create(template({\n                elementid: this.get('host').get('elementid'),\n                inserttext: M.util.get_string('insert', COMPONENTNAME)\n            }));\n\n        content.one('.' + CSS.INPUTSUBMIT).on('click', this._doWidgetsInsert, this, templateindex);\n        return content;\n    }\n\n    /**\n     * Display the cloud poodll tool.\n     *\n     * @method _displayDialogue\n     * @private\n     */\n    displayDialogue(e, recorder) {\n        e.preventDefault();\n        this._currentrecorder = recorder;\n\n        if (recorder == RECORDERS.WIDGETS) {\n            this._displayWidgetsDialogue(e, recorder);\n            return;\n        }\n\n        STATE.currentrecorder = recorder;\n\n        //get title and sizes\n        switch (recorder) {\n            case RECORDERS.SCREEN:\n                var title = M.util.get_string('createscreen', COMPONENTNAME);\n                var width = '502';\n                var height = \"660\";\n                break;\n\n            case RECORDERS.VIDEO:\n                var title = M.util.get_string('createvideo', COMPONENTNAME);\n                switch (CLOUDPOODLL.videoskin) {\n                    case SKIN.ONETWOTHREE:\n                        var width = '500';\n                        var height = \"660\";\n                        break;\n                    case SKIN.PLAIN:\n                        var width = '500';\n                        var height = \"580\";\n                        break;\n                    case SKIN.BMR:\n                        var width = '500';\n                        var height = \"620\";\n                        break;\n                    default:\n                        var width = '500';\n                        var height = false;\n\n                }\n                break;\n            case RECORDERS.AUDIO:\n            default:\n                var title = M.util.get_string('createaudio', COMPONENTNAME);\n                var width = '501';\n                var height = false;\n                break;\n        }\n\n        //set default subtitling flag\n        if (CLOUDPOODLL.cansubtitle) {\n            if (STATE.currentrecorder == RECORDERS.VIDEO ||\n                STATE.currentrecorder == RECORDERS.SCREEN) {\n                STATE.subtitling = STATE.subtitlevideobydefault;\n            } else {\n                STATE.subtitling = STATE.subtitleaudiobydefault;\n            }\n        }else{\n            STATE.subtitling = 0;\n        }\n\n        var d_conf = {};\n        d_conf.center = true;\n        d_conf.headerContent = title;\n        d_conf.focusAfterHide = recorder;\n        d_conf.width = width + 'px';\n        if (height) {\n            d_conf.height = height + 'px';\n        }\n\n        var dialogue = this.getDialogue(d_conf);\n\n        //if this dialog had a different size and title (it was popped up before as diff media recorder type)\n        if (dialogue.get('width') != width + 'px') {\n            dialogue.set('headerContent', title);\n            //sadly the width and height won't change .. whatever\n            dialogue.set('width', width + 'px');\n            dialogue.set('height', height + 'px');\n        }\n\n        var output = '';\n        if (CLOUDPOODLL.token == '') {\n            output = M.util.get_string('notoken', COMPONENTNAME);\n        } else {\n            //this block should be portioned into an async/await and function, but shifter wont allow it.\n            var context = this._getContext();\n            var that = this;\n            require(['core/templates','core/ajax', 'core/notification'], function (templates,ajax, notification) {\n\n                templates.render('atto_cloudpoodll/root', context).then(function (html, js) {\n                    output = html;\n                    var content = Y.Node.create(output);\n\n                    // Set the dialogue content, and then show the dialogue.\n                    dialogue.set('bodyContent', content).show();\n\n\n                    //store some common elements we will refer to later\n                    STATE.elementid = that.get('host').get('elementid');\n                    STATE.subtitlecheckbox = Y.one('#' + STATE.elementid + '_' + CSS.SUBTITLE_CHECKBOX);\n                    STATE.mediainsertcheckbox = Y.one('#' + STATE.elementid + '_' + CSS.MEDIAINSERT_CHECKBOX);\n                    STATE.languageselect = Y.one('#' + STATE.elementid + '_' + CSS.LANG_SELECT);\n                    STATE.expiredays = Y.one('#' + STATE.elementid + '_' + CSS.EXPIREDAYS_SELECT);\n                    var topnode = Y.one('#' + STATE.elementid + '_' + CSS.ATTO_CLOUDPOODLL_FORM);\n\n\n                    //this is important?\n                    poodllRecorder = that;\n\n                    //subtitle checkbox click event.. reload recorders\n                    if (STATE.subtitlecheckbox != null) {\n                        //if we can subtitle, handle events, otherwise disable it\n                        if (CLOUDPOODLL.cansubtitle) {\n                            STATE.subtitlecheckbox.on('click', function (e) {\n                                var element = e.currentTarget;\n                                //update recorder subtitle setting\n                                if (element.get('checked')) {\n                                    topnode.all('.' + CSS.CP_SWAP).setAttribute('data-transcribe', '1');\n                                    topnode.all('.' + CSS.CP_SWAP).setAttribute('data-subtitle', '1');\n                                    topnode.all('.' + CSS.CP_SWAP).setAttribute('data-alreadyparsed', 'false');\n                                    STATE.subtitling = true;\n                                } else {\n                                    topnode.all('.' + CSS.CP_SWAP).setAttribute('data-transcribe', '0');\n                                    topnode.all('.' + CSS.CP_SWAP).setAttribute('data-subtitle', '0');\n                                    topnode.all('.' + CSS.CP_SWAP).setAttribute('data-alreadyparsed', 'false');\n                                    STATE.subtitling = false;\n                                }\n                                //reload the recorders\n                                topnode.all('.' + CSS.CP_SWAP).empty();\n                                that._loadRecorders();\n                            });\n                        } else {\n                            this._disableSubtitleCheckbox();\n                        }\n                    }\n\n                    //insert method checkbox;\n                    if (STATE.mediainsertcheckbox != null) {\n                        STATE.mediainsertcheckbox.on('click', function (e) {\n                            var element = e.currentTarget;\n                            //update recorder subtitle setting\n                            if (element.get('checked')) {\n                                STATE.insertmethod = INSERTMETHOD.TAGS;\n                            } else {\n                                STATE.insertmethod = INSERTMETHOD.LINK;\n                            }\n                        });\n                    }\n\n                    //language selector\n                    if (STATE.languageselect != null) {\n                        STATE.languageselect.on('change', function (e) {\n                            var element = e.currentTarget;\n                            if (element) {\n                                CLOUDPOODLL.language =element.get('value');\n                                topnode.all('.' + CSS.CP_SWAP).setAttribute('data-language', CLOUDPOODLL.language);\n                                topnode.all('.' + CSS.CP_SWAP).setAttribute('data-alreadyparsed', 'false');\n                                //reload the recorders\n                                topnode.all('.' + CSS.CP_SWAP).empty();\n                                that._loadRecorders();\n                            }\n                        });\n                    }\n\n                    //expire days selector\n                    if (STATE.expiredays != null) {\n                        STATE.expiredays.on('change', function (e) {\n                            var element = e.currentTarget;\n                            if (element) {\n                                CLOUDPOODLL.expiredays = element.get('value');\n                                topnode.all('.' + CSS.CP_SWAP).setAttribute('data-expiredays', CLOUDPOODLL.expiredays);\n                                topnode.all('.' + CSS.CP_SWAP).setAttribute('data-alreadyparsed', 'false');\n                                //reload the recorders\n                                topnode.all('.' + CSS.CP_SWAP).empty();\n                                that._loadRecorders();\n                            }\n                        });\n                    }\n\n                    //so finally load those recorders\n                    that._loadRecorders();\n\n\n                }).fail(function (ex) {\n                    notification.exception(ex);\n\n                });\n            });\n\n        }//end of if cloudpoodll token\n    }\n\n    disableSubtitleCheckbox() {\n        //this function is never called, because if not transcribable, not shown\n        STATE.subtitlecheckbox.setAttribute('disabled', true);\n        var topnode = Y.one('#' + STATE.elementid + '_' + CSS.ATTO_CLOUDPOODLL_FORM);\n        topnode.all('.' + CSS.CP_SWAP).setAttribute('data-transcribe', '0');\n        topnode.all('.' + CSS.CP_SWAP).setAttribute('data-subtitle', '0');\n    }\n\n    /**\n     * Loads the history tab html.\n     *\n     * @method loadHistory\n     */\n    loadHistory() {\n        require(['core/templates','core/ajax', 'core/notification'], function (templates,ajax, notification) {\n            ajax.call([{\n                methodname: 'atto_cloudpoodll_history_get_items',\n                args: {'recordertype' : STATE.currentrecorder},\n                done: function (historyitems) {\n                    /**\n                     * Takes a mysql unix timestamp (in seconds) and converts to a display date.\n                     *\n                     * @method _formatUnixDate\n                     * @param dateToFormat Date to format\n                     */\n                    function _formatUnixDate(dateToFormat) {\n                        var dateObj = new Date(dateToFormat * 1000);\n\n                        var month = dateObj.getUTCMonth() + 1;\n                        var day = dateObj.getUTCDate();\n                        var year = dateObj.getUTCFullYear();\n\n                        return month + \"/\" + day + \"/\" + year;\n                    }\n\n                    if (Array.isArray(historyitems.responses)) {\n                        historyitems.responses.forEach(function(item){\n                            item.displaydateofentry = _formatUnixDate(item.dateofentry);\n                            item.displayfiletitle = item.filetitle.substring(0, STATE.filetitledisplaylength) + '...';\n                        });\n                        historyitems.responses.formatted = JSON.stringify(historyitems.responses);\n                    }\n\n                    var context = {data: historyitems.responses};\n\n                    templates.render('atto_cloudpoodll/historypanel', context)\n                        .then(function (html, js) {\n                            templates.replaceNodeContents('div[data-field=\"history\"]', html, js);\n                        }).fail(function (ex) {\n                        notification.exception(ex);\n                    });\n                }\n            }]);\n        });\n    }\n\n    /**\n     * Loads the history video preview tab html.\n     *\n     * @method loadHistoryPreview\n     * @param historyItem History item ID from list.\n     */\n    loadHistoryPreview(historyItem) {\n        require(['core/templates', 'core/ajax', 'core/notification'], function (templates, ajax, notification) {\n            ajax.call([{\n                methodname: 'atto_cloudpoodll_history_get_item',\n                args: {'id': historyItem.dataset.historyId},\n                done: function (historyItemData) {\n                    var context = {\n                        data: historyItemData.responses,\n                        isVideo: STATE.currentrecorder === RECORDERS.VIDEO || STATE.currentrecorder === RECORDERS.SCREEN\n                    };\n                    templates.render('atto_cloudpoodll/historypreview', context)\n                        .then(function (html, js) {\n                            templates.replaceNodeContents('div[data-field=\"history\"]', html, js);\n                        }).fail(function (ex) {\n                        notification.exception(ex);\n                    });\n                }\n            }]);\n        });\n    }\n\n    /**\n     * Loads or reloads the recorders\n     *\n     * @method _loadRecorders\n     * @private\n     */\n    loadRecorders() {\n        var that = this;\n\n        that.uploaded = false;\n        that.ap_count = 0;\n        require(['tiny_poodll/cloudpoodllloader'], function (loader) {\n            var recorder_callback = function (evt) {\n                switch (evt.type) {\n                    case 'recording':\n                        if (evt.action === 'started') {\n                            //if user toggled subtitle checkbox any time from now, the recording would be lost\n                            if (STATE.subtitlecheckbox != null) {\n                                STATE.subtitlecheckbox.set('disabled', true);\n                            }\n\n                        }\n                        break;\n                    case 'awaitingprocessing':\n                        //we delay  a second to allow the sourcefile to be copied to correct location\n                        //the source filename will sometimes be incorrect because we do not know it when creating the dynamo db entry\n                        // but an incorrect ext is just confusing. most players will ignore it and deal with contents\n                        if (!that.uploaded) {\n                            setTimeout(function () {\n                                var guessed_ext = loader.fetch_guessed_extension(STATE.currentrecorder );\n                                var sourcefilename = evt.sourcefilename.split('.').slice(0, -1).join('.') + '.' + guessed_ext;\n                                var sourceurl = evt.s3root + sourcefilename;\n                                that._doInsert(evt.mediaurl, evt.mediafilename, sourceurl, evt.sourcemimetype);\n                            }, 4000);\n                            that.uploaded = true;\n                        }\n                        break;\n                    case 'filesubmitted':\n                        //we will probably never get here because awaiting processing will fire first\n                        //we do not use this event, but it arrives when the final file is ready. (much earlier in case of non-transcode)\n\n                        break;\n                    case 'error':\n                        alert('PROBLEM:' + evt.message);\n                        break;\n                }\n            };\n            loader.init(CSS.CP_SWAP, recorder_callback);\n        });\n    }\n\n    /**\n     * Inserts the history item info the page.\n     *\n     * @method insertHistoryItem\n     * @param  historyItem object\n     * @private\n     */\n    insertHistoryItem(historyItem) {\n        poodllRecorder.getDialogue({\n            focusAfterHide: null\n        }).hide();\n\n        require(['core/ajax'], function (ajax) {\n            ajax.call([{\n                methodname: 'atto_cloudpoodll_history_get_item',\n                args: {'id': historyItem.dataset.historyId},\n                done: function (historyItemData) {\n                    //const [first] = historyItemData.responses;\n                    //var item = first;\n                    var item = historyItemData.responses[0];\n                    var mediaLink = poodllRecorder._createMediaLink(\n                        item.mediaurl,\n                        item.mediafilename,\n                        item.sourceurl,\n                        item.sourcemimetype\n                    );\n\n                    switch (STATE.insertmethod) {\n\n                        case INSERTMETHOD.TAGS:\n                            mediaLink.template = poodllRecorder._createMediaTemplate(mediaLink.context, item.sourcemimetype, mediaLink.template);\n                            break;\n\n                        case INSERTMETHOD.LINK:\n                        default:\n                        //do nothing we already made the template as a link\n                    }\n\n                    poodllRecorder._insertIntoEditor(mediaLink.template, mediaLink.context);\n                }\n            }]);\n        });\n    }\n\n    /**\n     * Creates the media link based on the recorder type.\n     *\n     * @method _createMediaLink\n     * @param  mediaurl media URL to the AWS object\n     * @param  mediafilename File name of the AWS object\n     * @param  sourceurl URL to the AWS object\n     * @param  sourcemimetype MimeType of the AWS object\n     * @private\n     */\n    createMediaLink(mediaurl, mediafilename, sourceurl, sourcemimetype) {\n        var context = {};\n        context.url = mediaurl;\n        context.name = mediafilename;\n        context.issubtitling = STATE.subtitling && STATE.subtitling !== '0';\n        context.includesourcetrack = STATE.transcoding && (mediaurl !== sourceurl) && (sourceurl.slice(-3) !== 'wav') && (sourceurl !== false);\n        context.CP = CLOUDPOODLL;\n        context.subtitleurl = mediaurl + '.vtt';\n        context.sourceurl = sourceurl;\n        context.sourcemimetype = sourcemimetype;\n\n        var template = TEMPLATES.HTML_MEDIA.LINK;\n\n        return {context: context, template: template};\n    }\n\n    /**\n     * Inserts the item into the editor.\n     *\n     * @method _createMediaLink\n     * @param  template HTML template to insert into the editor\n     * @param  context Context of the item being inserted\n     * @private\n     */\n    insertIntoEditor(template, context) {\n        var content =\n            Y.Handlebars.compile(template)(context);\n        this.editor.focus();\n        this.get('host').insertContentAtFocusPoint(content);\n        this.markUpdated();\n    }\n\n    /**\n     * Creates the media template for audio/video.\n     *\n     * @method _createMediaTemplate\n     * @param  context Context of the item being inserted\n     * @param  sourcemimetype MimeType of the AWS object\n     * @param  context Context of the item being inserted\n     * @private\n     */\n    createMediaTemplate(context, sourcemimetype, template) {\n        if (STATE.currentrecorder === RECORDERS.VIDEO || STATE.currentrecorder === RECORDERS.SCREEN) {\n            context.width = false;\n            context.height = false;\n            context.poster = false;\n            if (STATE.transcoding) {\n                context.urlmimetype = 'video/mp4';\n            } else {\n                context.urlmimetype = sourcemimetype;\n            }\n            template = TEMPLATES.HTML_MEDIA.VIDEO;\n        } else {\n            context.width = false;\n            context.height = false;\n            context.poster = false;\n            if (STATE.transcoding) {\n                context.urlmimetype = 'audio/mp3';\n            } else {\n                context.urlmimetype = sourcemimetype;\n            }\n            template = TEMPLATES.HTML_MEDIA.AUDIO;\n        }\n        return template;\n    }\n\n    /**\n     * Inserts the link or media element onto the page\n     * @method _doInsert\n     * @private\n     */\n    doInsert(mediaurl, mediafilename, sourceurl, sourcemimetype) {\n        this.getDialogue({\n            focusAfterHide: null\n        }).hide();\n\n        //default context values(link) for template\n        // var {context, template}\n        var medialink = this._createMediaLink(mediaurl, mediafilename, sourceurl, sourcemimetype);\n        var context = medialink.context;\n        var template = medialink.template;\n        function saveToHistory() {\n            require(['core/ajax'], function (ajax) {\n                ajax.call([{\n                    methodname: 'atto_cloudpoodll_history_create',\n                    args: {\n                        recordertype: STATE.currentrecorder,\n                        mediafilename: mediafilename,\n                        sourceurl: sourceurl,\n                        mediaurl: mediaurl,\n                        sourcemimetype: sourcemimetype,\n                        subtitling: STATE.subtitling ? 1 : 0,\n                        subtitleurl: STATE.subtitling ? mediaurl + '.vtt' : '',\n                    },\n                }]);\n            });\n        }\n\n        switch (STATE.insertmethod) {\n\n            case INSERTMETHOD.TAGS:\n                template = this._createMediaTemplate(context, sourcemimetype, template);\n                break;\n\n            case INSERTMETHOD.LINK:\n                break;\n            default:\n            //do nothing special actually.\n        }\n        saveToHistory();\n        this._insertIntoEditor(template, context);\n    } //end of doinsert\n\n    static fetchRecorderDimensions(config) {\n\n        // Get return object\n        var sizes = {};\n\n        //get video sizes]\n        switch (config.videoskin) {\n            case SKIN.ONETWOTHREE:\n            case SKIN.SCREEN:\n                sizes.videowidth = 441; //(because the @media CSS is for <=440)\n                sizes.videoheight = 540;\n                break;\n            case SKIN.BMR:\n                sizes.videowidth = 441; //(because the @media CSS is for <=440)\n                sizes.videoheight = 500;\n                break;\n            default:\n                sizes.videowidth = 441;\n                sizes.videoheight = 450;\n\n        }\n        switch (config.audioskin) {\n            default:\n                sizes.audiowidth = 450;\n                sizes.audioheight = 350;\n                break;\n        }\n        return sizes;\n    }\n\n    static getModalClass() {\n        const modalType = `${component}/rec_audio`;\n        const registration = ModalRegistry.get(modalType);\n        if (registration) {\n            return registration.module;\n        }\n\n        const AudioModal = class extends Modal {\n            static TYPE = modalType;\n            static TEMPLATE = `${component}/root`;\n        };\n\n        ModalRegistry.register(AudioModal.TYPE, AudioModal, AudioModal.TEMPLATE);\n        return AudioModal;\n    }\n\n    static getModalContext(editor) {\n\n        var context = {};\n        var config = getCloudpoodll(editor);\n        \n        //stuff declared in common\n        context.CSS = CSS;\n\n        //insert method\n        context.insertmethod = config.insertmethod;\n\n        //subtitle by default\n        context.subtitleaudiobydefault = config.subtitleaudiobydefault;\n        context.subtitlevideobydefault = config.subtitlevideobydefault;\n\n        //transcoding flag\n        context.transcoding = config.cp_transcode == '1';\n\n        //file title display length\n        context.filetitledisplaylength = config.filetitle_displaylength;\n\n        //show tabs\n        context.showhistory = config.showhistory== '1';\n        context.showupload = config.showupload== '1';\n        context.showoptions = config.showoptions== '1';\n        context.showexpiredays = config.showexpiredays== '1';\n\n        //set up the cloudpoodll div\n        context.CP={};\n        context.CP.parent = M.cfg.wwwroot;\n        context.CP.appid = 'tiny_poodll';\n        context.CP.token = config.cp_token;\n        context.CP.region = config.cp_region;\n        context.CP.owner = config.cp_owner;\n        context.CP.expiredays = config.cp_expiredays;\n        context.CP.cansubtitle = config.cp_cansubtitle;\n        context.CP.language = config.cp_language;\n        context.CP.transcode = config.cp_transcode;\n        context.CP.audioskin = config.cp_audioskin;\n        context.CP.videoskin = config.cp_videoskin;\n        context.CP.fallback = config.fallback;\n        context.CP.sizes = this.fetchRecorderDimensions(config);\n        return context;\n    }\n\n    static async display(editor) {\n        const ModalClass = this.getModalClass();\n        const templatecontext = this.getModalContext(editor);\n\n        //TO DO set these settigns according to the toolbar button which was clicked\n        templatecontext.isaudio=true;\n        templatecontext.recorder = 'audio'; //(audio or video)\n\n        const modal = await ModalFactory.create({\n            type: ModalClass.TYPE,\n            templateContext: templatecontext,\n            large: true,\n        });\n\n        // Set up the Recorder.\n        const recorder = new this(editor, modal, templatecontext);\n        recorder.loadRecorders();\n       // if (recorder.isReady()) {\n            modal.show();\n        //}\n        return modal;\n    }\n\n} //end of class\n"],"names":["constructor","editor","modal","config","ready","modalRoot","getRoot","registerEventListeners","close","hide","that","this","root","controls","recorders","querySelectorAll","CSS","CP_SWAP","addEventListener","e","cbox","target","closest","id","SUBTITLE_CHECKBOX","get","forEach","recorder","setAttribute","innerHTML","subtitling","loadRecorders","MEDIAINSERT_CHECKBOX","insertmethod","INSERTMETHOD","TAGS","LINK","dropdown","LANG_SELECT","CLOUDPOODLL","language","EXPIREDAYS_SELECT","expiredays","displayWidgetsDialogue","clickedicon","preventDefault","dialogue","getDialogue","headerContent","M","util","get_string","COMPONENTNAME","width","focusAfterHide","set","bodycontent","Y","Node","create","template","Handlebars","compile","BUTTONSHEADERTEMPLATE","content","headertext","append","buttons","_getButtonsForNames","Array","each","button","show","markUpdated","getButtonsForNames","allcontent","names","thename","currentindex","BUTTONTEMPLATE","elementid","name","templateindex","_form","one","NAMEBUTTON","on","_showTemplateForm","push","getSubmitButtons","SUBMITTEMPLATE","inserttext","INPUTSUBMIT","_doWidgetsInsert","displayDialogue","_currentrecorder","RECORDERS","WIDGETS","STATE","currentrecorder","SCREEN","title","height","VIDEO","videoskin","SKIN","ONETWOTHREE","PLAIN","BMR","AUDIO","cansubtitle","subtitlevideobydefault","subtitleaudiobydefault","d_conf","output","token","context","_getContext","require","templates","ajax","notification","render","then","html","js","subtitlecheckbox","mediainsertcheckbox","languageselect","topnode","ATTO_CLOUDPOODLL_FORM","poodllRecorder","currentTarget","all","empty","_loadRecorders","_disableSubtitleCheckbox","element","fail","ex","exception","_displayWidgetsDialogue","disableSubtitleCheckbox","loadHistory","call","methodname","args","done","historyitems","isArray","responses","item","dateToFormat","dateObj","displaydateofentry","dateofentry","Date","getUTCMonth","getUTCDate","getUTCFullYear","displayfiletitle","filetitle","substring","filetitledisplaylength","formatted","JSON","stringify","data","replaceNodeContents","loadHistoryPreview","historyItem","dataset","historyId","historyItemData","isVideo","uploaded","ap_count","loader","init","evt","type","action","setTimeout","guessed_ext","fetch_guessed_extension","sourcefilename","split","slice","join","sourceurl","s3root","_doInsert","mediaurl","mediafilename","sourcemimetype","alert","message","insertHistoryItem","mediaLink","_createMediaLink","_createMediaTemplate","_insertIntoEditor","createMediaLink","url","issubtitling","includesourcetrack","transcoding","CP","subtitleurl","TEMPLATES","HTML_MEDIA","insertIntoEditor","focus","insertContentAtFocusPoint","createMediaTemplate","poster","urlmimetype","doInsert","medialink","recordertype","sizes","videowidth","videoheight","audioskin","audiowidth","audioheight","modalType","component","registration","ModalRegistry","module","AudioModal","Modal","register","TYPE","TEMPLATE","cp_transcode","filetitle_displaylength","showhistory","showupload","showoptions","showexpiredays","parent","cfg","wwwroot","appid","cp_token","region","cp_region","owner","cp_owner","cp_expiredays","cp_cansubtitle","cp_language","transcode","cp_audioskin","cp_videoskin","fallback","fetchRecorderDimensions","ModalClass","getModalClass","templatecontext","getModalContext","isaudio","ModalFactory","templateContext","large"],"mappings":"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"}