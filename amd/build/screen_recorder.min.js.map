{"version":3,"file":"screen_recorder.min.js","sources":["../src/screen_recorder.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Poodll - screen recorder configuration.\n *\n * @module      tiny_poodll/audio_recorder\n * @copyright   2023 Justin Hunt <justin@poodll.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport BaseClass from './base_recorder';\nimport Modal from './modal';\nimport ModalRegistry from 'core/modal_registry';\nimport * as ModalFactory from 'core/modal_factory';\nimport {component, SKIN} from \"./common\";\nimport * as Templates from 'core/templates';\n\n\nexport default class Screen extends BaseClass {\n\n    static fetchRecorderDimensions(config) {\n\n        // Get return object\n        var sizes = {};\n        sizes.videowidth = 441; //(because the @media CSS is for <=440)\n        sizes.videoheight = 540;\n        return sizes;\n    }\n\n\n    static async display(editor) {\n        const ModalClass = this.getModalClass();\n        const templatecontext = this.getModalContext(editor);\n        const elementid = this.generateRandomString();\n\n        //TO DO set these settigns according to the toolbar button which was clicked\n        templatecontext.isscreen=true;\n        templatecontext.recorder = 'video';\n        templatecontext.elementid = elementid;\n        if(templatecontext.subtitlevideobydefault){\n            templatecontext.subtitling=true;\n        }else{\n            templatecontext.subtitling=false;\n        }\n\n        const modal = await ModalFactory.create({\n            type: ModalClass.TYPE,\n            templateContext: templatecontext,\n            large: true,\n        });\n\n        // Set up the Recorder.\n        const recorder = new this(editor, elementid, modal, templatecontext);\n        recorder.loadRecorders();\n        recorder.initHistory();\n\n        // if (recorder.isReady()) {\n        modal.show();\n        //}\n        return modal;\n    }\n\n    /**\n     * Creates the media html5 tags based on the recorder type.\n     *\n     * @method fetchMediaTags\n     * @param  mediaurl media URL to the AWS object\n     * @param  mediafilename File name of the AWS object\n     * @param  sourceurl URL to the AWS object\n     * @param  sourcemimetype MimeType of the AWS object\n     * @private\n     */\n    fetchMediaTags(mediaurl, mediafilename, sourceurl, sourcemimetype) {\n        var context = {};\n        context.url = mediaurl;\n        context.name = mediafilename;\n        context.issubtitling = this.config.subtitling && this.config.subtitling !== '0';\n        context.includesourcetrack = this.config.transcoding && (mediaurl !== sourceurl) && (sourceurl.slice(-3) !== 'wav') && (sourceurl !== false);\n        context.CP = this.config.CP;\n        context.subtitleurl = mediaurl + '.vtt';\n        context.sourceurl = sourceurl;\n        context.sourcemimetype = sourcemimetype;\n        context.poster = false;\n        if (this.config.transcoding) {\n            context.urlmimetype = 'video/mp4';\n        } else {\n            context.urlmimetype = sourcemimetype;\n        }\n        return Templates.renderForPromise(\n            'tiny_poodll/videoplayer',\n            context\n        );\n    }\n}\n"],"names":["Screen","BaseClass","config","sizes","editor","ModalClass","this","getModalClass","templatecontext","getModalContext","elementid","generateRandomString","isscreen","recorder","subtitlevideobydefault","subtitling","modal","ModalFactory","create","type","TYPE","templateContext","large","loadRecorders","initHistory","show","fetchMediaTags","mediaurl","mediafilename","sourceurl","sourcemimetype","context","url","name","issubtitling","includesourcetrack","transcoding","slice","CP","subtitleurl","poster","urlmimetype","Templates","renderForPromise"],"mappings":";;;;;;;+UA+BqBA,eAAeC,sDAEDC,YAGvBC,MAAQ,CACZA,WAAmB,IACnBA,YAAoB,YACbA,2BAIUC,cACXC,WAAaC,KAAKC,gBAClBC,gBAAkBF,KAAKG,gBAAgBL,QACvCM,UAAYJ,KAAKK,uBAGvBH,gBAAgBI,UAAS,EACzBJ,gBAAgBK,SAAW,QAC3BL,gBAAgBE,UAAYA,UACzBF,gBAAgBM,uBACfN,gBAAgBO,YAAW,EAE3BP,gBAAgBO,YAAW,QAGzBC,YAAcC,aAAaC,OAAO,CACpCC,KAAMd,WAAWe,KACjBC,gBAAiBb,gBACjBc,OAAO,IAILT,SAAW,IAAIP,KAAKF,OAAQM,UAAWM,MAAOR,wBACpDK,SAASU,gBACTV,SAASW,cAGTR,MAAMS,OAECT,MAaXU,eAAeC,SAAUC,cAAeC,UAAWC,oBAC3CC,QAAU,UACdA,QAAQC,IAAML,SACdI,QAAQE,KAAOL,cACfG,QAAQG,aAAe5B,KAAKJ,OAAOa,YAAyC,MAA3BT,KAAKJ,OAAOa,WAC7DgB,QAAQI,mBAAqB7B,KAAKJ,OAAOkC,aAAgBT,WAAaE,WAAuC,QAAxBA,UAAUQ,OAAO,KAAgC,IAAdR,UACxHE,QAAQO,GAAKhC,KAAKJ,OAAOoC,GACzBP,QAAQQ,YAAcZ,SAAW,OACjCI,QAAQF,UAAYA,UACpBE,QAAQD,eAAiBA,eACzBC,QAAQS,QAAS,EACblC,KAAKJ,OAAOkC,YACZL,QAAQU,YAAc,YAEtBV,QAAQU,YAAcX,eAEnBY,UAAUC,iBACb,0BACAZ"}