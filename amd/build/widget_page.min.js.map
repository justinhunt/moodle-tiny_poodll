{"version":3,"file":"widget_page.min.js","sources":["../src/widget_page.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Poodll - Widgets Page\n *\n * @module      tiny_poodll/widgets page\n * @copyright   2023 Justin Hunt <justin@poodll.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\nimport Pending from 'core/pending';\nimport Log from 'core/log';\nimport {getConfig} from './options';\n\nimport {add as addToast} from 'core/toast';\nimport * as ModalEvents from 'core/modal_events';\nimport * as ModalFactory from 'core/modal_factory';\nimport * as Templates from 'core/templates';\nimport {saveCancelPromise} from 'core/notification';\nimport {prefetchStrings, prefetchTemplates} from 'core/prefetch';\nimport Modal from \"./modal\";\nimport ModalRegistry from 'core/modal_registry';\nimport * as Notification from 'core/notification';\n\nimport {\n    component,\n    CSS,\n} from './common';\n\n/**\n * The Poodll base class for audio, video, and any other future types\n */\nexport default class {\n\n    /**\n     * Constructor for the Tiny Poodll Widgets Page\n     *\n     * @param {TinyMCE} editor The Editor to which the content will be inserted\n     * @param {elementid} elementid\n     * @param {Modal} modal The Moodle Modal that contains the interface used for recording\n     * @param {config} config The data passed to template and used internally for managing plugin state\n     */\n    constructor(editor,elementid, modal, config) {\n        this.ready = false;\n\n        this.editor = editor;\n        this.elementid = elementid;\n        this.config = config;//getData(editor).params;\n        this.modal = modal;\n        this.modalRoot = modal.getRoot()[0];\n        this.registerEvents();\n        this.ready = true;\n    }\n\n    /**\n     * Close the modal and stop recording.\n     */\n    close() {\n        // Closing the modal will destroy it and remove it from the DOM.\n        // It will also stop the recording via the hidden Modal Event.\n        this.modal.hide();\n    }\n\n    getElement(component){\n        return this.modalRoot.querySelector('#' + this.elementid + '_' + component);\n    }\n\n    /**\n     * Register event listeners for the modal.\n     */\n    registerEvents() {\n        var that =this;\n        const $root = this.modal.getRoot();\n        const root = $root[0];\n        const recorders = root.querySelectorAll('.' + CSS.CP_SWAP);\n\n    }\n\n\n    /**\n     * Display the widgets dialog\n     *\n     * @method _displayDialogue\n     * @private\n     */\n    displayWidgetsDialogue(e, clickedicon) {\n        e.preventDefault();\n        var width = 800;\n\n        var dialogue = this.getDialogue({\n            headerContent: M.util.get_string('dialogtitle', COMPONENTNAME),\n            width: width + 'px',\n            focusAfterHide: clickedicon\n        });\n        //dialog doesn't detect changes in width without this\n        //if you reuse the dialog, this seems necessary\n        if (dialogue.width !== width + 'px') {\n            dialogue.set('width', width + 'px');\n        }\n\n\n        //create content container\n        var bodycontent = Y.Node.create('<div></div>');\n\n        //create and append header\n        var template = Y.Handlebars.compile(BUTTONSHEADERTEMPLATE),\n            content = Y.Node.create(template({\n                headertext: M.util.get_string('chooseinsert', COMPONENTNAME)\n            }));\n        bodycontent.append(content);\n\n        //get button nodes\n        var buttons = this._getButtonsForNames(clickedicon);\n\n        Y.Array.each(buttons, function (button) {\n            bodycontent.append(button);\n        }, bodycontent);\n\n        //set to bodycontent\n        dialogue.set('bodyContent', bodycontent);\n        dialogue.show();\n\n        this.markUpdated();\n    }\n\n\n\n\n\n    /**\n     * Inserts the link or media element onto the page\n     * @method doInsert\n     * @param  mediaurl media URL to the AWS object\n     * @param  mediafilename File name of the AWS object\n     * @param  sourceurl URL to the AWS object\n     * @param  sourcemimetype MimeType of the AWS object\n     * @private\n     */\n    doInsert(mediaurl, mediafilename, sourceurl, sourcemimetype) {\n\n        var that = this;\n\n        //do the actual inserting\n        switch (this.config.insertmethod) {\n\n            case INSERTMETHOD.TAGS:\n                this.fetchMediaTags(mediaurl, mediafilename, sourceurl, sourcemimetype).then(\n                    function(insert){\n                        Log.debug('inserting into editor');\n                        that.editor.insertContent(insert.html);\n                        that.close();\n                        //addToast(await getString('recordinguploaded', component));\n                    }\n                );\n                break;\n\n            case INSERTMETHOD.LINK:\n            default:\n                this.fetchMediaLink(mediaurl, mediafilename, sourceurl, sourcemimetype).then(\n                    function(insert){\n                        Log.debug('inserting into editor');\n                        Log.debug(insert.html);\n                        that.editor.insertContent(insert.html);\n                        that.close();\n                    }\n                );\n\n        }\n\n    } //end of doinsert\n\n\n    static generateRandomString() {\n        var length = 8;\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var result = '';\n\n        for (var i = 0; i < length; i++) {\n            var randomIndex = Math.floor(Math.random() * characters.length);\n            result += characters.charAt(randomIndex);\n        }\n\n        return result;\n    }\n\n    static getModalClass() {\n        const modalType = `${component}/widgetpage`;\n        const registration = ModalRegistry.get(modalType);\n        if (registration) {\n            return registration.module;\n        }\n\n        const WidgetModal = class extends Modal {\n            static TYPE = modalType;\n            static TEMPLATE = `${component}/widgetpage`;\n        };\n\n        ModalRegistry.register(WidgetModal.TYPE, WidgetModal, WidgetModal.TEMPLATE);\n        return WidgetModal;\n    }\n\n    static getModalContext(editor) {\n\n        var context = {};\n        var config = getConfig(editor);\n        Log.debug(config);\n        \n        //stuff declared in common\n        context.CSS = CSS;\n\n        //insert method\n      //  context.insertmethod = config.insertmethod;\n\n        return context;\n    }\n\n    static async display(editor) {\n        const ModalClass = this.getModalClass();\n        const templatecontext = this.getModalContext(editor);\n        const elementid = this.generateRandomString();\n\n        const modal = await ModalFactory.create({\n            type: ModalClass.TYPE,\n            templateContext: templatecontext,\n            large: true,\n        });\n\n\n        modal.show();\n        return modal;\n    }\n\n} //end of class\n"],"names":["constructor","editor","elementid","modal","config","ready","modalRoot","getRoot","registerEvents","close","hide","getElement","component","this","querySelector","querySelectorAll","CSS","CP_SWAP","displayWidgetsDialogue","e","clickedicon","preventDefault","dialogue","getDialogue","headerContent","M","util","get_string","COMPONENTNAME","width","focusAfterHide","set","bodycontent","Y","Node","create","template","Handlebars","compile","BUTTONSHEADERTEMPLATE","content","headertext","append","buttons","_getButtonsForNames","Array","each","button","show","markUpdated","doInsert","mediaurl","mediafilename","sourceurl","sourcemimetype","that","insertmethod","INSERTMETHOD","TAGS","fetchMediaTags","then","insert","debug","insertContent","html","LINK","fetchMediaLink","characters","result","i","randomIndex","Math","floor","random","length","charAt","modalType","registration","ModalRegistry","get","module","WidgetModal","Modal","register","TYPE","TEMPLATE","context","ModalClass","getModalClass","templatecontext","getModalContext","generateRandomString","ModalFactory","type","templateContext","large"],"mappings":"6gEAwDIA,YAAYC,OAAOC,UAAWC,MAAOC,aAC5BC,OAAQ,OAERJ,OAASA,YACTC,UAAYA,eACZE,OAASA,YACTD,MAAQA,WACRG,UAAYH,MAAMI,UAAU,QAC5BC,sBACAH,OAAQ,EAMjBI,aAGSN,MAAMO,OAGfC,WAAWC,kBACAC,KAAKP,UAAUQ,cAAc,IAAMD,KAAKX,UAAY,IAAMU,WAMrEJ,iBAEkBK,KAAKV,MAAMI,UACN,GACIQ,iBAAiB,IAAMC,YAAIC,SAWtDC,uBAAuBC,EAAGC,aACtBD,EAAEE,qBAGEC,SAAWT,KAAKU,YAAY,CAC5BC,cAAeC,EAAEC,KAAKC,WAAW,cAAeC,eAChDC,MAAOA,QACPC,eAAgBV,cAIGS,UAAnBP,SAASO,OACTP,SAASS,IAAI,QAASF,aAKtBG,YAAcC,EAAEC,KAAKC,OAAO,eAG5BC,SAAWH,EAAEI,WAAWC,QAAQC,uBAChCC,QAAUP,EAAEC,KAAKC,OAAOC,SAAS,CAC7BK,WAAYhB,EAAEC,KAAKC,WAAW,eAAgBC,kBAEtDI,YAAYU,OAAOF,aAGfG,QAAU9B,KAAK+B,oBAAoBxB,aAEvCa,EAAEY,MAAMC,KAAKH,SAAS,SAAUI,QAC5Bf,YAAYU,OAAOK,UACpBf,aAGHV,SAASS,IAAI,cAAeC,aAC5BV,SAAS0B,YAEJC,cAgBTC,SAASC,SAAUC,cAAeC,UAAWC,oBAErCC,KAAO1C,YAGHA,KAAKT,OAAOoD,mBAEXC,aAAaC,UACTC,eAAeR,SAAUC,cAAeC,UAAWC,gBAAgBM,MACpE,SAASC,qBACDC,MAAM,yBACVP,KAAKtD,OAAO8D,cAAcF,OAAOG,MACjCT,KAAK9C,sBAMZgD,aAAaQ,kBAETC,eAAef,SAAUC,cAAeC,UAAWC,gBAAgBM,MACpE,SAASC,qBACDC,MAAM,sCACNA,MAAMD,OAAOG,MACjBT,KAAKtD,OAAO8D,cAAcF,OAAOG,MACjCT,KAAK9C,kDAWjB0D,WAAa,iEACbC,OAAS,GAEJC,EAAI,EAAGA,EAJH,EAIeA,IAAK,KACzBC,YAAcC,KAAKC,MAAMD,KAAKE,SAAWN,WAAWO,QACxDN,QAAUD,WAAWQ,OAAOL,oBAGzBF,+CAIDQ,oBAAehE,iCACfiE,aAAeC,wBAAcC,IAAIH,cACnCC,oBACOA,aAAaG,aAGlBC,oCAAc,cAAcC,wBAChBN,uDACOhE,yEAGXuE,SAASF,YAAYG,KAAMH,YAAaA,YAAYI,UAC3DJ,mCAGYhF,YAEfqF,QAAU,GACVlF,QAAS,sBAAUH,4BACnB6D,MAAM1D,QAGVkF,QAAQtE,IAAMA,YAKPsE,6BAGUrF,cACXsF,WAAa1E,KAAK2E,gBAClBC,gBAAkB5E,KAAK6E,gBAAgBzF,QAGvCE,OAFYU,KAAK8E,6BAEHC,aAAazD,OAAO,CACpC0D,KAAMN,WAAWH,KACjBU,gBAAiBL,gBACjBM,OAAO,YAIX5F,MAAM6C,OACC7C"}