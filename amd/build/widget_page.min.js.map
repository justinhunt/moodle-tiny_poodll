{"version":3,"file":"widget_page.min.js","sources":["../src/widget_page.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Poodll - Widgets Page\n *\n * @module      tiny_poodll/widgets page\n * @copyright   2023 Justin Hunt <justin@poodll.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\nimport Pending from 'core/pending';\nimport Log from 'core/log';\nimport {getConfig} from './options';\n\nimport {add as addToast} from 'core/toast';\nimport * as ModalEvents from 'core/modal_events';\nimport * as ModalFactory from 'core/modal_factory';\nimport * as Templates from 'core/templates';\nimport {saveCancelPromise} from 'core/notification';\nimport {prefetchStrings, prefetchTemplates} from 'core/prefetch';\nimport Modal from \"./modal\";\nimport ModalRegistry from 'core/modal_registry';\nimport * as Notification from 'core/notification';\n\nimport {\n    component,\n    CSS,\n} from './common';\n\n/**\n * The Poodll base class for audio, video, and any other future types\n */\nexport default class {\n\n    /**\n     * Constructor for the Tiny Poodll Widgets Page\n     *\n     * @param {TinyMCE} editor The Editor to which the content will be inserted\n     * @param {elementid} elementid\n     * @param {Modal} modal The Moodle Modal that contains the interface used for recording\n     * @param {config} config The data passed to template and used internally for managing plugin state\n     */\n    constructor(editor,elementid, modal, config) {\n        this.ready = false;\n\n        this.editor = editor;\n        this.elementid = elementid;\n        this.config = config;//getData(editor).params;\n        this.modal = modal;\n        this.modalRoot = modal.getRoot()[0];\n    }\n\n    init(){\n        this.registerEvents();\n        this.ready = true;\n    }\n\n    /**\n     * Close the modal and stop recording.\n     */\n    close() {\n        // Closing the modal will destroy it and remove it from the DOM.\n        // It will also stop the recording via the hidden Modal Event.\n        this.modal.hide();\n    }\n\n    getElement(component){\n        return this.modalRoot.querySelector('#' + this.elementid + '_' + component);\n    }\n\n    /**\n     * Register event listeners for the modal.\n     */\n    registerEvents() {\n        var that =this;\n        const $root = this.modal.getRoot();\n        const root = $root[0];\n        //const widgetbuttons = root.getElementsByClassName('tiny_poodll_widgetbutton');\n\n        ///listen for button clicks\n        root.addEventListener(\"click\", function(e) {\n            var widgetchosen = e.target.closest(\".tiny_poodll_widgetchoosebutton\");\n            var widgetinserted = e.target.closest(\".tiny_poodll_widgetinsertbutton\");\n            var widgetcancelled = e.target.closest(\".tiny_poodll_widgetcancelledbutton\");\n\n            //If widget chosen from widget page (chooser)\n            if (widgetchosen) {\n                e.preventDefault();\n                //get our widget from the configs\n\n                var templateindex = e.target.getAttribute('data-templateindex');\n                var widget = that.getWidget(templateindex);\n\n                if (widget == null) {\n                    Log.debug(\"That template not found: \" + templateindex);\n                    Log.debug(that.config);\n                    return;\n                } else {\n                    //show the widget form\n                    that.showOptionsPanel(e, widget);\n                }\n            }\n\n            //If widget inserted from widget options page\n            if (widgetinserted) {\n                e.preventDefault();\n                var templateindex = e.target.getAttribute('data-templateindex');\n                var widget = that.getWidget(templateindex);\n                if (widget == null) {\n                    Log.debug(\"That template not found: \" + templateindex);\n                    Log.debug(that.config);\n                    return;\n                } else {\n                    //get the filter string\n                    var filterstring = that.getFilterString(widget);\n                    //insert the filter string into the editor\n                    that.editor.insertContent(filterstring);\n                    //close the modal\n                    that.close();\n                }\n            }\n\n            //If widget options cancelled\n            if (widgetcancelled) {\n                e.preventDefault();\n\n                //show the widget form\n                that.hideOptionsPanel(e, widget);\n\n            }\n        });//end of button click listener\n\n    }//end of register events\n\n    getWidget(templateindex) {\n        var widget = null;\n        for (var i = 0; i < this.config.widgets.length; i++) {\n            if (this.config.widgets[i].templateindex == templateindex) {\n                widget = this.config.widgets[i];\n                break;\n            }\n        }\n        return widget;\n    }\n\n    /**\n     * Display the chosen widgets template form\n     *\n     * @method showTemplateForm\n     * @private\n     */\n    showOptionsPanel(e, widget) {\n        var that = this;\n        Log.debug('showing the template form for: ' + widget.name);\n\n        that.modalRoot.querySelector('#tiny_poodll_widgets_optionspanel');\n        Templates.render('tiny_poodll/widgetoptions', widget).then(function (html, js) {\n            var optionspanel = that.modalRoot.querySelector('#tiny_poodll_widgets_optionspanel');\n            var selectorpanel = that.modalRoot.querySelector('#tiny_poodll_widgets_selectorpanel');\n            Log.debug('replacing contents of options panel');\n\n            //this would fail if the options panel had already made in insert, and was re-used. Weird.\n            //replaced with: optionspanel.innerHTML = html;\n            //Templates.replaceNodeContents('#tiny_poodll_widgets_optionspanel', html, js);\n            optionspanel.innerHTML = html;\n\n\n            //hide and show the selector and options panels\n            selectorpanel.classList.add('tiny_poodll_hidden');\n            optionspanel.classList.remove('tiny_poodll_hidden');\n            //trigger the animations\n            optionspanel.style.left=0;\n            selectorpanel.style.left= selectorpanel.offsetWidth * -1 + 'px'\n        }).catch(\n            function (e){Log.debug(e);}\n        );\n\n    }\n\n    /**\n     * Display the chosen widgets template form\n     *\n     * @method showTemplateForm\n     * @private\n     */\n    hideOptionsPanel() {\n        var that = this;\n        Log.debug('hiding the template options form ');\n\n        //animate it out\n        var optionspanel = that.modalRoot.querySelector('#tiny_poodll_widgets_optionspanel');\n        var selectorpanel = that.modalRoot.querySelector('#tiny_poodll_widgets_selectorpanel');\n        //hide and show the selector and options panels\n        selectorpanel.classList.remove('tiny_poodll_hidden');\n        optionspanel.classList.add('tiny_poodll_hidden');\n        //trigger the animations\n        optionspanel.style.left=optionspanel.offsetWidth  +  'px';\n        selectorpanel.style.left=0;\n    }\n\n    /**\n     * Inserts the users input onto the page\n     * @method _getWidgetsInsert\n     * @private\n     */\n    getFilterString(widget) {\n\n        var retstring = \"{POODLL:type=\";\n        var widgetkey = widget.key;\n        var thevariables = widget.variables;\n        var thedefaults = widget.defaults;\n        var theend = widget.end;\n        var defaultsarray = thedefaults;\n\n        //add key to return string\n        retstring += '\"' + widgetkey + '\"';\n\n        //add variables to return string\n        for (var i = 0; i < thevariables.length; i++) {\n            var thevalue=null;\n            var elements=null;\n            //if select box\n            if(thevariables[i].isarray) {\n                elements = this.modalRoot.querySelectorAll('select[data-type=\"' + thevariables[i].key + '\"]');\n            //if input box\n            }else{\n                elements = this.modalRoot.querySelectorAll('input[data-type=\"' + thevariables[i].key + '\"]');\n            }\n            if (elements.length > 0) {\n                thevalue = elements[0].value;\n            }\n           if(thevalue!==null){\n               retstring += ',' + thevariables[i].key + '=\"' + thevalue + '\"';\n           }\n        }\n\n        //close out return string\n        retstring += \"}\";\n\n        //add an end tag, if we need to\n        if (theend) {\n            retstring += '<br/>{POODLL:type=\"' + widgetkey + '_end\"}';\n        }\n        return retstring;\n\n    }\n\n\n\n    static generateRandomString() {\n        var length = 8;\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var result = '';\n\n        for (var i = 0; i < length; i++) {\n            var randomIndex = Math.floor(Math.random() * characters.length);\n            result += characters.charAt(randomIndex);\n        }\n\n        return result;\n    }\n\n    static getModalClass() {\n        const modalType = `${component}/widgetpage`;\n        const registration = ModalRegistry.get(modalType);\n        if (registration) {\n            return registration.module;\n        }\n\n        const WidgetModal = class extends Modal {\n            static TYPE = modalType;\n            static TEMPLATE = `${component}/widgetpage`;\n        };\n\n        ModalRegistry.register(WidgetModal.TYPE, WidgetModal, WidgetModal.TEMPLATE);\n        return WidgetModal;\n    }\n\n    static getModalContext(editor) {\n\n        var context = {};\n        var config = getConfig(editor);\n        Log.debug(config);\n        \n        //stuff declared in common\n        context.CSS = CSS;\n\n        //insert method\n        context.widgets = config.widgets;\n\n        return context;\n    }\n\n    static async display(editor) {\n        const ModalClass = this.getModalClass();\n        const templatecontext = this.getModalContext(editor);\n        const elementid = this.generateRandomString();\n\n        const modal = await ModalFactory.create({\n            type: ModalClass.TYPE,\n            templateContext: templatecontext,\n            large: true,\n        });\n\n        // Set up the Widgets Panel and show the modal\n        const widgetspanel = new this(editor, elementid, modal, templatecontext);\n        widgetspanel.init();\n\n        modal.show();\n        return modal;\n    }\n\n} //end of class\n"],"names":["constructor","editor","elementid","modal","config","ready","modalRoot","getRoot","init","registerEvents","close","hide","getElement","component","this","querySelector","that","addEventListener","e","widgetchosen","target","closest","widgetinserted","widgetcancelled","preventDefault","templateindex","getAttribute","widget","getWidget","debug","showOptionsPanel","filterstring","getFilterString","insertContent","hideOptionsPanel","i","widgets","length","name","Templates","render","then","html","js","optionspanel","selectorpanel","innerHTML","classList","add","remove","style","left","offsetWidth","catch","retstring","widgetkey","key","thevariables","variables","theend","defaults","end","thevalue","elements","isarray","querySelectorAll","value","characters","result","randomIndex","Math","floor","random","charAt","modalType","registration","ModalRegistry","get","module","WidgetModal","Modal","register","TYPE","TEMPLATE","context","CSS","ModalClass","getModalClass","templatecontext","getModalContext","generateRandomString","ModalFactory","create","type","templateContext","large","show"],"mappings":"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"}