{"version":3,"file":"base_recorder.min.js","sources":["../src/base_recorder.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Poodll - audio recorder configuration.\n *\n * @module      tiny_poodll/audio_recorder\n * @copyright   2023 Justin Hunt <justin@poodll.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\nimport Pending from 'core/pending';\nimport Log from 'core/log';\nimport {getCloudpoodll} from './options';\nimport uploadFile from 'editor_tiny/uploader';\nimport {add as addToast} from 'core/toast';\nimport * as ModalEvents from 'core/modal_events';\nimport * as ModalFactory from 'core/modal_factory';\nimport * as Templates from 'core/templates';\nimport {saveCancelPromise} from 'core/notification';\nimport {prefetchStrings, prefetchTemplates} from 'core/prefetch';\nimport Modal from \"./modal\";\nimport ModalRegistry from 'core/modal_registry';\nimport History from 'tiny_poodll/history';\nimport * as Notification from 'core/notification';\n\nimport {\n    component,\n    INSERTMETHOD,\n    LANGUAGE,\n    CSS,\n    SKIN\n} from './common';\n\n/**\n * The Poodll base class for audio, video, and any other future types\n */\nexport default class {\n\n    /**\n     * Constructor for the Tiny Poodll Recorder\n     *\n     * @param {TinyMCE} editor The Editor to which the content will be inserted\n     * @param {elementid} elementid\n     * @param {Modal} modal The Moodle Modal that contains the interface used for recording\n     * @param {config} config The data passed to template and used internally for managing plugin state\n     */\n    constructor(editor,elementid, modal, config) {\n        this.ready = false;\n/*\n        if (!this.checkAndWarnAboutBrowserCompatibility()) {\n            return;\n        }\n*/\n        this.editor = editor;\n        this.elementid = elementid;\n        this.config = config;//getData(editor).params;\n        this.modal = modal;\n        this.modalRoot = modal.getRoot()[0];\n        this.registerEvents();\n        this.ready = true;\n    }\n\n    /**\n     * Get the name of the template used when embedding the URL in the editor content.\n     *\n     * @returns {string}\n     */\n    fetchMediaTags() {\n        throw new Error(`fetchMediaTags() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Close the modal and stop recording.\n     */\n    close() {\n        // Closing the modal will destroy it and remove it from the DOM.\n        // It will also stop the recording via the hidden Modal Event.\n        this.modal.hide();\n    }\n\n    getElement(component){\n        return this.modalRoot.querySelector('#' + this.elementid + '_' + component);\n    }\n\n    /**\n     * Register event listeners for the modal.\n     */\n    registerEvents() {\n        var that =this;\n        const $root = this.modal.getRoot();\n        const root = $root[0];\n        const recorders = root.querySelectorAll('.' + CSS.CP_SWAP);\n\n        /*\n        $root.on(ModalEvents.save, (event, modal) => {\n            handleDialogueSubmission(editor, modal, data);\n        });\n        */\n\n        root.addEventListener('click', (e) => {\n            const cbox = e.target.closest('[type=\"checkbox\"]');\n           // if (cbox) {\n            Log.debug(e.target.id);\n                switch (e.target.id) {\n                    case that.elementid + '_' + CSS.SUBTITLE_CHECKBOX:\n                        //update recorder subtitle setting\n                        if (cbox.checked) {\n                            recorders.forEach((recorder) => {\n                                recorder.setAttribute('data-transcribe', '1');\n                                recorder.setAttribute('data-subtitle', '1');\n                                recorder.setAttribute('data-alreadyparsed', 'false');\n                                recorder.innerHTML = \"\";\n                            });\n                            that.config.subtitling = true;\n                        } else {\n                            recorders.forEach((recorder) => {\n                                recorder.setAttribute('data-transcribe', '0');\n                                recorder.setAttribute('data-subtitle', '0');\n                                recorder.setAttribute('data-alreadyparsed', 'false');\n                                recorder.innerHTML = \"\";\n                            });\n                            that.config.subtitling = false;\n                        }\n                        //reload the recorders\n                        that.loadRecorders();\n                        break;\n                    case  that.elementid + '_' + CSS.MEDIAINSERT_CHECKBOX:\n                        //update recorder subtitle setting\n                        if (cbox.checked) {\n                            that.config.insertmethod = INSERTMETHOD.TAGS;\n                        } else {\n                            that.config.insertmethod = INSERTMETHOD.LINK;\n                        }\n                        break;\n                }\n           // }\n        });\n        root.addEventListener('change', (e) => {\n            const dropdown = e.target;\n            if(dropdown){\n                switch(dropdown.id){\n                    case that.elementid + '_' + CSS.LANG_SELECT:\n                        //TO DO - save this value, or leave it as is ... do we need to keep track of it, for insert method?\n                        CLOUDPOODLL.language =dropdown.get('value');\n                        recorders.forEach((recorder) => {\n                            recorder.setAttribute('data-language', that.config.CP.language);\n                            recorder.setAttribute('data-alreadyparsed', 'false');\n                            recorder.innerHTML=\"\";\n                        });\n                        that.loadRecorders();\n                        break;\n                    case that.elementid + '_' + CSS.EXPIREDAYS_SELECT:\n                        //do something\n                        recorders.forEach((recorder) => {\n                            recorder.setAttribute('data-expiredays', that.config.CP.expiredays);\n                            recorder.setAttribute('data-alreadyparsed', 'false');\n                            recorder.innerHTML=\"\";\n                        });\n                        that.loadRecorders();\n                }\n\n            }\n\n        });\n\n        /*\n        this.modalRoot.addEventListener('click', this.handleModalClick.bind(this));\n        this.modal.getRoot().on(ModalEvents.outsideClick, this.outsideClickHandler.bind(this));\n        this.modal.getRoot().on(ModalEvents.hidden, () => {\n            this.cleanupStream();\n            this.requestRecordingStop();\n        });\n\n         */\n    }\n\n\n    /**\n     * Display the widgets dialog\n     *\n     * @method _displayDialogue\n     * @private\n     */\n    displayWidgetsDialogue(e, clickedicon) {\n        e.preventDefault();\n        var width = 800;\n\n        var dialogue = this.getDialogue({\n            headerContent: M.util.get_string('dialogtitle', COMPONENTNAME),\n            width: width + 'px',\n            focusAfterHide: clickedicon\n        });\n        //dialog doesn't detect changes in width without this\n        //if you reuse the dialog, this seems necessary\n        if (dialogue.width !== width + 'px') {\n            dialogue.set('width', width + 'px');\n        }\n\n\n        //create content container\n        var bodycontent = Y.Node.create('<div></div>');\n\n        //create and append header\n        var template = Y.Handlebars.compile(BUTTONSHEADERTEMPLATE),\n            content = Y.Node.create(template({\n                headertext: M.util.get_string('chooseinsert', COMPONENTNAME)\n            }));\n        bodycontent.append(content);\n\n        //get button nodes\n        var buttons = this._getButtonsForNames(clickedicon);\n\n        Y.Array.each(buttons, function (button) {\n            bodycontent.append(button);\n        }, bodycontent);\n\n        //set to bodycontent\n        dialogue.set('bodyContent', bodycontent);\n        dialogue.show();\n\n        this.markUpdated();\n    }\n\n\n\n    /**\n     * Return the widget dialogue content for the tool, attaching any required\n     * events. OLD\n     *\n     * @method _getSubmitButtons\n     * @return {Node} The content to place in the dialogue.\n     * @private\n     */\n    getSubmitButtons(templateindex) {\n\n        var template = Y.Handlebars.compile(SUBMITTEMPLATE),\n\n            content = Y.Node.create(template({\n                elementid: this.get('host').get('elementid'),\n                inserttext: M.util.get_string('insert', COMPONENTNAME)\n            }));\n\n        content.one('.' + CSS.INPUTSUBMIT).on('click', this._doWidgetsInsert, this, templateindex);\n        return content;\n    }\n\n    /**\n     * Display the cloud poodll tool. OLD\n     *\n     * @method _displayDialogue\n     * @private\n     */\n    displayDialogue(e, recorder) {\n        e.preventDefault();\n        this._currentrecorder = recorder;\n\n        if (recorder == RECORDERS.WIDGETS) {\n            this._displayWidgetsDialogue(e, recorder);\n            return;\n        }\n\n        STATE.currentrecorder = recorder;\n\n        //get title and sizes\n        switch (recorder) {\n            case RECORDERS.SCREEN:\n                var title = M.util.get_string('createscreen', COMPONENTNAME);\n                var width = '502';\n                var height = \"660\";\n                break;\n\n            case RECORDERS.VIDEO:\n                var title = M.util.get_string('createvideo', COMPONENTNAME);\n                switch (CLOUDPOODLL.videoskin) {\n                    case SKIN.ONETWOTHREE:\n                        var width = '500';\n                        var height = \"660\";\n                        break;\n                    case SKIN.PLAIN:\n                        var width = '500';\n                        var height = \"580\";\n                        break;\n                    case SKIN.BMR:\n                        var width = '500';\n                        var height = \"620\";\n                        break;\n                    default:\n                        var width = '500';\n                        var height = false;\n\n                }\n                break;\n            case RECORDERS.AUDIO:\n            default:\n                var title = M.util.get_string('createaudio', COMPONENTNAME);\n                var width = '501';\n                var height = false;\n                break;\n        }\n\n        //set default subtitling flag\n        if (CLOUDPOODLL.cansubtitle) {\n            if (STATE.currentrecorder == RECORDERS.VIDEO ||\n                STATE.currentrecorder == RECORDERS.SCREEN) {\n                STATE.subtitling = STATE.subtitlevideobydefault;\n            } else {\n                STATE.subtitling = STATE.subtitleaudiobydefault;\n            }\n        }else{\n            STATE.subtitling = 0;\n        }\n\n        var d_conf = {};\n        d_conf.center = true;\n        d_conf.headerContent = title;\n        d_conf.focusAfterHide = recorder;\n        d_conf.width = width + 'px';\n        if (height) {\n            d_conf.height = height + 'px';\n        }\n\n        var dialogue = this.getDialogue(d_conf);\n\n        //if this dialog had a different size and title (it was popped up before as diff media recorder type)\n        if (dialogue.get('width') != width + 'px') {\n            dialogue.set('headerContent', title);\n            //sadly the width and height won't change .. whatever\n            dialogue.set('width', width + 'px');\n            dialogue.set('height', height + 'px');\n        }\n\n        var output = '';\n        if (CLOUDPOODLL.token == '') {\n            output = M.util.get_string('notoken', COMPONENTNAME);\n        } else {\n            //this block should be portioned into an async/await and function, but shifter wont allow it.\n            var context = this._getContext();\n            var that = this;\n            require(['core/templates','core/ajax', 'core/notification'], function (templates,ajax, notification) {\n\n                templates.render('atto_cloudpoodll/root', context).then(function (html, js) {\n                    output = html;\n                    var content = Y.Node.create(output);\n\n                    // Set the dialogue content, and then show the dialogue.\n                    dialogue.set('bodyContent', content).show();\n\n\n                    //store some common elements we will refer to later\n                    STATE.elementid = that.get('host').get('elementid');\n                    STATE.subtitlecheckbox = Y.one('#' + STATE.elementid + '_' + CSS.SUBTITLE_CHECKBOX);\n                    STATE.mediainsertcheckbox = Y.one('#' + STATE.elementid + '_' + CSS.MEDIAINSERT_CHECKBOX);\n                    STATE.languageselect = Y.one('#' + STATE.elementid + '_' + CSS.LANG_SELECT);\n                    STATE.expiredays = Y.one('#' + STATE.elementid + '_' + CSS.EXPIREDAYS_SELECT);\n                    var topnode = Y.one('#' + STATE.elementid + '_' + CSS.ATTO_CLOUDPOODLL_FORM);\n\n\n                    //this is important?\n                    poodllRecorder = that;\n\n                    //subtitle checkbox click event.. reload recorders\n                    if (STATE.subtitlecheckbox != null) {\n                        //if we can subtitle, handle events, otherwise disable it\n                        if (CLOUDPOODLL.cansubtitle) {\n                            STATE.subtitlecheckbox.on('click', function (e) {\n                                var element = e.currentTarget;\n                                //update recorder subtitle setting\n                                if (element.get('checked')) {\n                                    topnode.all('.' + CSS.CP_SWAP).setAttribute('data-transcribe', '1');\n                                    topnode.all('.' + CSS.CP_SWAP).setAttribute('data-subtitle', '1');\n                                    topnode.all('.' + CSS.CP_SWAP).setAttribute('data-alreadyparsed', 'false');\n                                    STATE.subtitling = true;\n                                } else {\n                                    topnode.all('.' + CSS.CP_SWAP).setAttribute('data-transcribe', '0');\n                                    topnode.all('.' + CSS.CP_SWAP).setAttribute('data-subtitle', '0');\n                                    topnode.all('.' + CSS.CP_SWAP).setAttribute('data-alreadyparsed', 'false');\n                                    STATE.subtitling = false;\n                                }\n                                //reload the recorders\n                                topnode.all('.' + CSS.CP_SWAP).empty();\n                                that._loadRecorders();\n                            });\n                        } else {\n                            this._disableSubtitleCheckbox();\n                        }\n                    }\n\n                    //insert method checkbox;\n                    if (STATE.mediainsertcheckbox != null) {\n                        STATE.mediainsertcheckbox.on('click', function (e) {\n                            var element = e.currentTarget;\n                            //update recorder subtitle setting\n                            if (element.get('checked')) {\n                                STATE.insertmethod = INSERTMETHOD.TAGS;\n                            } else {\n                                STATE.insertmethod = INSERTMETHOD.LINK;\n                            }\n                        });\n                    }\n\n                    //language selector\n                    if (STATE.languageselect != null) {\n                        STATE.languageselect.on('change', function (e) {\n                            var element = e.currentTarget;\n                            if (element) {\n                                CLOUDPOODLL.language =element.get('value');\n                                topnode.all('.' + CSS.CP_SWAP).setAttribute('data-language', CLOUDPOODLL.language);\n                                topnode.all('.' + CSS.CP_SWAP).setAttribute('data-alreadyparsed', 'false');\n                                //reload the recorders\n                                topnode.all('.' + CSS.CP_SWAP).empty();\n                                that._loadRecorders();\n                            }\n                        });\n                    }\n\n                    //expire days selector\n                    if (STATE.expiredays != null) {\n                        STATE.expiredays.on('change', function (e) {\n                            var element = e.currentTarget;\n                            if (element) {\n                                CLOUDPOODLL.expiredays = element.get('value');\n                                topnode.all('.' + CSS.CP_SWAP).setAttribute('data-expiredays', CLOUDPOODLL.expiredays);\n                                topnode.all('.' + CSS.CP_SWAP).setAttribute('data-alreadyparsed', 'false');\n                                //reload the recorders\n                                topnode.all('.' + CSS.CP_SWAP).empty();\n                                that._loadRecorders();\n                            }\n                        });\n                    }\n\n                    //so finally load those recorders\n                    that._loadRecorders();\n\n\n                }).fail(function (ex) {\n                    notification.exception(ex);\n\n                });\n            });\n\n        }//end of if cloudpoodll token\n    }\n\n    disableSubtitleCheckbox() {\n        //this function is never called, because if not transcribable, not shown\n        STATE.subtitlecheckbox.setAttribute('disabled', true);\n        var topnode = Y.one('#' + STATE.elementid + '_' + CSS.ATTO_CLOUDPOODLL_FORM);\n        topnode.all('.' + CSS.CP_SWAP).setAttribute('data-transcribe', '0');\n        topnode.all('.' + CSS.CP_SWAP).setAttribute('data-subtitle', '0');\n    }\n\n    /**\n     * Initialises history tab and events\n     *\n     * @method initHistory\n     * @private\n     */\n    initHistory() {\n        this.history = new History(this);\n    }\n\n    /**\n     * Loads or reloads the recorders\n     *\n     * @method _loadRecorders\n     * @private\n     */\n    loadRecorders() {\n        var that = this;\n        Log.debug('loading recorders');\n        that.uploaded = false;\n        that.ap_count = 0;\n        require(['tiny_poodll/cloudpoodllloader'], function (loader) {\n            var recorder_callback = function (evt) {\n                switch (evt.type) {\n                    case 'recording':\n                        if (evt.action === 'started') {\n                            //if user toggled subtitle checkbox any time from now, the recording would be lost\n                            var subtitlecheckbox= that.getElement(CSS.SUBTITLE_CHECKBOX);\n                            if (subtitlecheckbox != null) {\n                                subtitlecheckbox.disabled = true;\n                            }\n                        }\n                        break;\n                    case 'awaitingprocessing':\n                        //we delay  a second to allow the sourcefile to be copied to correct location\n                        //the source filename will sometimes be incorrect because we do not know it when creating the dynamo db entry\n                        // but an incorrect ext is just confusing. most players will ignore it and deal with contents\n                        if (!that.uploaded) {\n                            setTimeout(function () {\n                                var guessed_ext = loader.fetch_guessed_extension(that.recorder );\n                                var sourcefilename = evt.sourcefilename.split('.').slice(0, -1).join('.') + '.' + guessed_ext;\n                                var sourceurl = evt.s3root + sourcefilename;\n                                //save history\n                                Log.debug(\"saving history item\");\n                                that.history.saveHistoryItem(evt.mediaurl,evt.mediafilename, sourceurl, evt.sourcemimetype).then(\n                                    function(){Log.debug(\"ajax SAVED history item\");}\n                                );\n                                that.doInsert(evt.mediaurl, evt.mediafilename, sourceurl, evt.sourcemimetype);\n                            }, 4000);\n                            that.uploaded = true;\n                        }\n                        break;\n                    case 'filesubmitted':\n                        //we will probably never get here because awaiting processing will fire first\n                        //we do not use this event, but it arrives when the final file is ready. (much earlier in case of non-transcode)\n\n                        break;\n                    case 'error':\n                        alert('PROBLEM:' + evt.message);\n                        break;\n                }\n            };\n            loader.init(CSS.CP_SWAP, recorder_callback);\n        });\n    }\n\n\n    /**\n     * Creates the media link based on the recorder type.\n     *\n     * @method fetchMediaLink\n     * @param  mediaurl media URL to the AWS object\n     * @param  mediafilename File name of the AWS object\n     * @param  sourceurl URL to the AWS object\n     * @param  sourcemimetype MimeType of the AWS object\n     * @private\n     */\n    fetchMediaLink(mediaurl, mediafilename, sourceurl, sourcemimetype) {\n        var context = {};\n        context.url = mediaurl;\n        context.name = mediafilename;\n        context.issubtitling = this.config.subtitling && this.config.subtitling !== '0';\n        context.includesourcetrack = this.config.transcoding && (mediaurl !== sourceurl) && (sourceurl.slice(-3) !== 'wav') && (sourceurl !== false);\n        context.CP = this.config.CP;\n        context.subtitleurl = mediaurl + '.vtt';\n        context.sourceurl = sourceurl;\n        context.sourcemimetype = sourcemimetype;\n        return Templates.renderForPromise(\n            'tiny_poodll/medialink',\n            context\n        );\n    }\n\n    /**\n     * Inserts the link or media element onto the page\n     * @method doInsert\n     * @param  mediaurl media URL to the AWS object\n     * @param  mediafilename File name of the AWS object\n     * @param  sourceurl URL to the AWS object\n     * @param  sourcemimetype MimeType of the AWS object\n     * @private\n     */\n    doInsert(mediaurl, mediafilename, sourceurl, sourcemimetype) {\n\n        var that = this;\n\n        //do the actual inserting\n        switch (this.config.insertmethod) {\n\n            case INSERTMETHOD.TAGS:\n                this.fetchMediaTags(mediaurl, mediafilename, sourceurl, sourcemimetype).then(\n                    function(insert){\n                        Log.debug('inserting into editor');\n                        that.editor.insertContent(insert.html);\n                        that.close();\n                        //addToast(await getString('recordinguploaded', component));\n                    }\n                );\n                break;\n\n            case INSERTMETHOD.LINK:\n            default:\n                this.fetchMediaLink(mediaurl, mediafilename, sourceurl, sourcemimetype).then(\n                    function(insert){\n                        Log.debug('inserting into editor');\n                        Log.debug(insert.html);\n                        that.editor.insertContent(insert.html);\n                        that.close();\n                    }\n                );\n\n        }\n\n    } //end of doinsert\n\n\n    static generateRandomString() {\n        var length = 8;\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var result = '';\n\n        for (var i = 0; i < length; i++) {\n            var randomIndex = Math.floor(Math.random() * characters.length);\n            result += characters.charAt(randomIndex);\n        }\n\n        return result;\n    }\n\n    static getModalClass() {\n        const modalType = `${component}/media_recorder`;\n        const registration = ModalRegistry.get(modalType);\n        if (registration) {\n            return registration.module;\n        }\n\n        const MediaModal = class extends Modal {\n            static TYPE = modalType;\n            static TEMPLATE = `${component}/root`;\n        };\n\n        ModalRegistry.register(MediaModal.TYPE, MediaModal, MediaModal.TEMPLATE);\n        return MediaModal;\n    }\n\n    static getModalContext(editor) {\n\n        var context = {};\n        var config = getCloudpoodll(editor);\n        Log.debug(config);\n        \n        //stuff declared in common\n        context.CSS = CSS;\n\n        //insert method\n        context.insertmethod = config.insertmethod;\n\n        //subtitle by default\n        context.subtitleaudiobydefault = config.subtitleaudiobydefault;\n        context.subtitlevideobydefault = config.subtitlevideobydefault;\n\n        //transcoding flag\n        context.transcoding = config.cp_transcode == '1';\n\n        //file title display length\n        context.filetitledisplaylength = config.filetitle_displaylength;\n\n        //show tabs\n        context.showhistory = config.showhistory== '1';\n        context.showupload = config.showupload== '1';\n        context.showoptions = config.showoptions== '1';\n        context.showexpiredays = config.showexpiredays== '1';\n        context.cansubtitle = config.cp_cansubtitle;\n\n        //set up the cloudpoodll div\n        context.CP={};\n        context.CP.parent = M.cfg.wwwroot;\n        context.CP.appid = 'tiny_poodll';\n        context.CP.token = config.cp_token;\n        context.CP.region = config.cp_region;\n        context.CP.owner = config.cp_owner;\n        context.CP.expiredays = config.cp_expiredays;\n        context.CP.cansubtitle = config.cp_cansubtitle;\n        context.CP.language = config.cp_language;\n        context.CP.transcode = config.cp_transcode;\n        context.CP.audioskin = config.cp_audioskin;\n        context.CP.videoskin = config.cp_videoskin;\n        context.CP.fallback = config.fallback;\n        context.CP.sizes = this.fetchRecorderDimensions(config);\n\n        //get defaults for expire days and subtitle language\n        context['expire_' + config.cp_expiredays] =true;\n        context['lang_' + config.cp_language] =true;\n\n        return context;\n    }\n\n    static async display(editor) {\n        const ModalClass = this.getModalClass();\n        const templatecontext = this.getModalContext(editor);\n        const elementid = this.generateRandomString();\n\n        //TO DO set these settigns according to the toolbar button which was clicked\n        templatecontext.isaudio=true;\n        templatecontext.recorder = 'audio'; //(audio or video)\n        templatecontext.elementid = elementid;\n\n        const modal = await ModalFactory.create({\n            type: ModalClass.TYPE,\n            templateContext: templatecontext,\n            large: true,\n        });\n\n        // Set up the Recorder.\n        const recorder = new this(editor, elementid, modal, templatecontext);\n        recorder.loadRecorders();\n        //recorder.initHistory();\n\n\n       // if (recorder.isReady()) {\n            modal.show();\n        //}\n        return modal;\n    }\n\n} //end of class\n"],"names":["constructor","editor","elementid","modal","config","ready","modalRoot","getRoot","registerEvents","fetchMediaTags","Error","this","name","close","hide","getElement","component","querySelector","that","root","recorders","querySelectorAll","CSS","CP_SWAP","addEventListener","e","cbox","target","closest","debug","id","SUBTITLE_CHECKBOX","checked","forEach","recorder","setAttribute","innerHTML","subtitling","loadRecorders","MEDIAINSERT_CHECKBOX","insertmethod","INSERTMETHOD","TAGS","LINK","dropdown","LANG_SELECT","CLOUDPOODLL","language","get","CP","EXPIREDAYS_SELECT","expiredays","displayWidgetsDialogue","clickedicon","preventDefault","dialogue","getDialogue","headerContent","M","util","get_string","COMPONENTNAME","width","focusAfterHide","set","bodycontent","Y","Node","create","template","Handlebars","compile","BUTTONSHEADERTEMPLATE","content","headertext","append","buttons","_getButtonsForNames","Array","each","button","show","markUpdated","getSubmitButtons","templateindex","SUBMITTEMPLATE","inserttext","one","INPUTSUBMIT","on","_doWidgetsInsert","displayDialogue","_currentrecorder","RECORDERS","WIDGETS","STATE","currentrecorder","SCREEN","title","height","VIDEO","videoskin","SKIN","ONETWOTHREE","PLAIN","BMR","AUDIO","cansubtitle","subtitlevideobydefault","subtitleaudiobydefault","d_conf","output","token","context","_getContext","require","templates","ajax","notification","render","then","html","js","subtitlecheckbox","mediainsertcheckbox","languageselect","topnode","ATTO_CLOUDPOODLL_FORM","poodllRecorder","currentTarget","all","empty","_loadRecorders","_disableSubtitleCheckbox","element","fail","ex","exception","_displayWidgetsDialogue","disableSubtitleCheckbox","initHistory","history","History","uploaded","ap_count","loader","init","evt","type","action","disabled","setTimeout","guessed_ext","fetch_guessed_extension","sourcefilename","split","slice","join","sourceurl","s3root","saveHistoryItem","mediaurl","mediafilename","sourcemimetype","doInsert","alert","message","fetchMediaLink","url","issubtitling","includesourcetrack","transcoding","subtitleurl","Templates","renderForPromise","insert","insertContent","characters","result","i","randomIndex","Math","floor","random","length","charAt","modalType","registration","ModalRegistry","module","MediaModal","Modal","register","TYPE","TEMPLATE","cp_transcode","filetitledisplaylength","filetitle_displaylength","showhistory","showupload","showoptions","showexpiredays","cp_cansubtitle","parent","cfg","wwwroot","appid","cp_token","region","cp_region","owner","cp_owner","cp_expiredays","cp_language","transcode","audioskin","cp_audioskin","cp_videoskin","fallback","sizes","fetchRecorderDimensions","ModalClass","getModalClass","templatecontext","getModalContext","generateRandomString","isaudio","ModalFactory","templateContext","large"],"mappings":"qqEA4DIA,YAAYC,OAAOC,UAAWC,MAAOC,aAC5BC,OAAQ,OAMRJ,OAASA,YACTC,UAAYA,eACZE,OAASA,YACTD,MAAQA,WACRG,UAAYH,MAAMI,UAAU,QAC5BC,sBACAH,OAAQ,EAQjBI,uBACU,IAAIC,wDAAiDC,KAAKX,YAAYY,OAMhFC,aAGSV,MAAMW,OAGfC,WAAWC,kBACAL,KAAKL,UAAUW,cAAc,IAAMN,KAAKT,UAAY,IAAMc,WAMrER,qBACQU,KAAMP,WAEJQ,KADQR,KAAKR,MAAMI,UACN,GACba,UAAYD,KAAKE,iBAAiB,IAAMC,YAAIC,SAQlDJ,KAAKK,iBAAiB,SAAUC,UACtBC,KAAOD,EAAEE,OAAOC,QAAQ,yCAE1BC,MAAMJ,EAAEE,OAAOG,IACPL,EAAEE,OAAOG,SACRZ,KAAKhB,UAAY,IAAMoB,YAAIS,kBAExBL,KAAKM,SACLZ,UAAUa,SAASC,WACfA,SAASC,aAAa,kBAAmB,KACzCD,SAASC,aAAa,gBAAiB,KACvCD,SAASC,aAAa,qBAAsB,SAC5CD,SAASE,UAAY,MAEzBlB,KAAKd,OAAOiC,YAAa,IAEzBjB,UAAUa,SAASC,WACfA,SAASC,aAAa,kBAAmB,KACzCD,SAASC,aAAa,gBAAiB,KACvCD,SAASC,aAAa,qBAAsB,SAC5CD,SAASE,UAAY,MAEzBlB,KAAKd,OAAOiC,YAAa,GAG7BnB,KAAKoB,2BAEHpB,KAAKhB,UAAY,IAAMoB,YAAIiB,qBAEzBb,KAAKM,QACLd,KAAKd,OAAOoC,aAAeC,qBAAaC,KAExCxB,KAAKd,OAAOoC,aAAeC,qBAAaE,SAM5DxB,KAAKK,iBAAiB,UAAWC,UACvBmB,SAAWnB,EAAEE,UAChBiB,gBACQA,SAASd,SACPZ,KAAKhB,UAAY,IAAMoB,YAAIuB,YAE5BC,YAAYC,SAAUH,SAASI,IAAI,SACnC5B,UAAUa,SAASC,WACfA,SAASC,aAAa,gBAAiBjB,KAAKd,OAAO6C,GAAGF,UACtDb,SAASC,aAAa,qBAAsB,SAC5CD,SAASE,UAAU,MAEvBlB,KAAKoB,2BAEJpB,KAAKhB,UAAY,IAAMoB,YAAI4B,kBAE5B9B,UAAUa,SAASC,WACfA,SAASC,aAAa,kBAAmBjB,KAAKd,OAAO6C,GAAGE,YACxDjB,SAASC,aAAa,qBAAsB,SAC5CD,SAASE,UAAU,MAEvBlB,KAAKoB,oBAyBzBc,uBAAuB3B,EAAG4B,aACtB5B,EAAE6B,qBAGEC,SAAW5C,KAAK6C,YAAY,CAC5BC,cAAeC,EAAEC,KAAKC,WAAW,cAAeC,eAChDC,MAAOA,QACPC,eAAgBV,cAIGS,UAAnBP,SAASO,OACTP,SAASS,IAAI,QAASF,aAKtBG,YAAcC,EAAEC,KAAKC,OAAO,eAG5BC,SAAWH,EAAEI,WAAWC,QAAQC,uBAChCC,QAAUP,EAAEC,KAAKC,OAAOC,SAAS,CAC7BK,WAAYhB,EAAEC,KAAKC,WAAW,eAAgBC,kBAEtDI,YAAYU,OAAOF,aAGfG,QAAUjE,KAAKkE,oBAAoBxB,aAEvCa,EAAEY,MAAMC,KAAKH,SAAS,SAAUI,QAC5Bf,YAAYU,OAAOK,UACpBf,aAGHV,SAASS,IAAI,cAAeC,aAC5BV,SAAS0B,YAEJC,cAaTC,iBAAiBC,mBAETf,SAAWH,EAAEI,WAAWC,QAAQc,gBAEhCZ,QAAUP,EAAEC,KAAKC,OAAOC,SAAS,CAC7BnE,UAAWS,KAAKqC,IAAI,QAAQA,IAAI,aAChCsC,WAAY5B,EAAEC,KAAKC,WAAW,SAAUC,yBAGhDY,QAAQc,IAAI,IAAMjE,YAAIkE,aAAaC,GAAG,QAAS9E,KAAK+E,iBAAkB/E,KAAMyE,eACrEX,QASXkB,gBAAgBlE,EAAGS,aACfT,EAAE6B,sBACGsC,iBAAmB1D,SAEpBA,UAAY2D,UAAUC,gBAK1BC,MAAMC,gBAAkB9D,SAGhBA,eACC2D,UAAUI,WACPC,MAAQxC,EAAEC,KAAKC,WAAW,eAAgBC,eAC1CC,MAAQ,MACRqC,OAAS,iBAGZN,UAAUO,MACPF,MAAQxC,EAAEC,KAAKC,WAAW,cAAeC,sBACrCf,YAAYuD,gBACXC,aAAKC,YACFzC,MAAQ,MACRqC,OAAS,iBAEZG,aAAKE,MACF1C,MAAQ,MACRqC,OAAS,iBAEZG,aAAKG,IACF3C,MAAQ,MACRqC,OAAS,oBAGTrC,MAAQ,MACRqC,QAAS,aAIpBN,UAAUa,cAEPR,MAAQxC,EAAEC,KAAKC,WAAW,cAAeC,eACzCC,MAAQ,MACRqC,QAAS,EAKjBrD,YAAY6D,YACRZ,MAAMC,iBAAmBH,UAAUO,OACnCL,MAAMC,iBAAmBH,UAAUI,OACnCF,MAAM1D,WAAa0D,MAAMa,uBAEzBb,MAAM1D,WAAa0D,MAAMc,uBAG7Bd,MAAM1D,WAAa,MAGnByE,OAAS,CACbA,QAAgB,GAChBA,OAAOrD,cAAgByC,MACvBY,OAAO/C,eAAiB7B,SACxB4E,OAAOhD,MAAQA,MAAQ,KACnBqC,SACAW,OAAOX,OAASA,OAAS,UAGzB5C,SAAW5C,KAAK6C,YAAYsD,QAG5BvD,SAASP,IAAI,UAAYc,MAAQ,OACjCP,SAASS,IAAI,gBAAiBkC,OAE9B3C,SAASS,IAAI,QAASF,MAAQ,MAC9BP,SAASS,IAAI,SAAUmC,OAAS,WAGhCY,OAAS,MACY,IAArBjE,YAAYkE,MACZD,OAASrD,EAAEC,KAAKC,WAAW,UAAWC,mBACnC,KAECoD,QAAUtG,KAAKuG,cACfhG,KAAOP,KACXwG,QAAQ,CAAC,iBAAiB,YAAa,sBAAsB,SAAUC,UAAUC,KAAMC,cAEnFF,UAAUG,OAAO,wBAAyBN,SAASO,MAAK,SAAUC,KAAMC,IACpEX,OAASU,SACLhD,QAAUP,EAAEC,KAAKC,OAAO2C,QAG5BxD,SAASS,IAAI,cAAeS,SAASQ,OAIrCc,MAAM7F,UAAYgB,KAAK8B,IAAI,QAAQA,IAAI,aACvC+C,MAAM4B,iBAAmBzD,EAAEqB,IAAI,IAAMQ,MAAM7F,UAAY,IAAMoB,YAAIS,mBACjEgE,MAAM6B,oBAAsB1D,EAAEqB,IAAI,IAAMQ,MAAM7F,UAAY,IAAMoB,YAAIiB,sBACpEwD,MAAM8B,eAAiB3D,EAAEqB,IAAI,IAAMQ,MAAM7F,UAAY,IAAMoB,YAAIuB,aAC/DkD,MAAM5C,WAAae,EAAEqB,IAAI,IAAMQ,MAAM7F,UAAY,IAAMoB,YAAI4B,uBACvD4E,QAAU5D,EAAEqB,IAAI,IAAMQ,MAAM7F,UAAY,IAAMoB,YAAIyG,uBAItDC,eAAiB9G,KAGa,MAA1B6E,MAAM4B,mBAEF7E,YAAY6D,YACZZ,MAAM4B,iBAAiBlC,GAAG,SAAS,SAAUhE,GAC3BA,EAAEwG,cAEJjF,IAAI,YACZ8E,QAAQI,IAAI,IAAM5G,YAAIC,SAASY,aAAa,kBAAmB,KAC/D2F,QAAQI,IAAI,IAAM5G,YAAIC,SAASY,aAAa,gBAAiB,KAC7D2F,QAAQI,IAAI,IAAM5G,YAAIC,SAASY,aAAa,qBAAsB,SAClE4D,MAAM1D,YAAa,IAEnByF,QAAQI,IAAI,IAAM5G,YAAIC,SAASY,aAAa,kBAAmB,KAC/D2F,QAAQI,IAAI,IAAM5G,YAAIC,SAASY,aAAa,gBAAiB,KAC7D2F,QAAQI,IAAI,IAAM5G,YAAIC,SAASY,aAAa,qBAAsB,SAClE4D,MAAM1D,YAAa,GAGvByF,QAAQI,IAAI,IAAM5G,YAAIC,SAAS4G,QAC/BjH,KAAKkH,yBAGJC,4BAKoB,MAA7BtC,MAAM6B,qBACN7B,MAAM6B,oBAAoBnC,GAAG,SAAS,SAAUhE,GAC9BA,EAAEwG,cAEJjF,IAAI,WACZ+C,MAAMvD,aAAeC,qBAAaC,KAElCqD,MAAMvD,aAAeC,qBAAaE,QAMlB,MAAxBoD,MAAM8B,gBACN9B,MAAM8B,eAAepC,GAAG,UAAU,SAAUhE,OACpC6G,QAAU7G,EAAEwG,cACZK,UACAxF,YAAYC,SAAUuF,QAAQtF,IAAI,SAClC8E,QAAQI,IAAI,IAAM5G,YAAIC,SAASY,aAAa,gBAAiBW,YAAYC,UACzE+E,QAAQI,IAAI,IAAM5G,YAAIC,SAASY,aAAa,qBAAsB,SAElE2F,QAAQI,IAAI,IAAM5G,YAAIC,SAAS4G,QAC/BjH,KAAKkH,qBAMO,MAApBrC,MAAM5C,YACN4C,MAAM5C,WAAWsC,GAAG,UAAU,SAAUhE,OAChC6G,QAAU7G,EAAEwG,cACZK,UACAxF,YAAYK,WAAamF,QAAQtF,IAAI,SACrC8E,QAAQI,IAAI,IAAM5G,YAAIC,SAASY,aAAa,kBAAmBW,YAAYK,YAC3E2E,QAAQI,IAAI,IAAM5G,YAAIC,SAASY,aAAa,qBAAsB,SAElE2F,QAAQI,IAAI,IAAM5G,YAAIC,SAAS4G,QAC/BjH,KAAKkH,qBAMjBlH,KAAKkH,oBAGNG,MAAK,SAAUC,IACdlB,aAAamB,UAAUD,qBAlL1BE,wBAAwBjH,EAAGS,UA0LxCyG,0BAEI5C,MAAM4B,iBAAiBxF,aAAa,YAAY,OAC5C2F,QAAU5D,EAAEqB,IAAI,IAAMQ,MAAM7F,UAAY,IAAMoB,YAAIyG,uBACtDD,QAAQI,IAAI,IAAM5G,YAAIC,SAASY,aAAa,kBAAmB,KAC/D2F,QAAQI,IAAI,IAAM5G,YAAIC,SAASY,aAAa,gBAAiB,KASjEyG,mBACSC,QAAU,IAAIC,iBAAQnI,MAS/B2B,oBACQpB,KAAOP,kBACPkB,MAAM,qBACVX,KAAK6H,UAAW,EAChB7H,KAAK8H,SAAW,EAChB7B,QAAQ,CAAC,kCAAkC,SAAU8B,QAyCjDA,OAAOC,KAAK5H,YAAIC,SAxCQ,SAAU4H,YACtBA,IAAIC,UACH,eACkB,YAAfD,IAAIE,OAAsB,KAEtB1B,iBAAkBzG,KAAKH,WAAWO,YAAIS,mBAClB,MAApB4F,mBACAA,iBAAiB2B,UAAW,aAInC,qBAIIpI,KAAK6H,WACNQ,YAAW,eACHC,YAAcP,OAAOQ,wBAAwBvI,KAAKgB,UAClDwH,eAAiBP,IAAIO,eAAeC,MAAM,KAAKC,MAAM,GAAI,GAAGC,KAAK,KAAO,IAAML,YAC9EM,UAAYX,IAAIY,OAASL,4BAEzB7H,MAAM,uBACVX,KAAK2H,QAAQmB,gBAAgBb,IAAIc,SAASd,IAAIe,cAAeJ,UAAWX,IAAIgB,gBAAgB3C,MACxF,wBAAe3F,MAAM,8BAEzBX,KAAKkJ,SAASjB,IAAIc,SAAUd,IAAIe,cAAeJ,UAAWX,IAAIgB,kBAC/D,KACHjJ,KAAK6H,UAAW,aAGnB,0BAKA,QACDsB,MAAM,WAAalB,IAAImB,gBAmB3CC,eAAeN,SAAUC,cAAeJ,UAAWK,oBAC3ClD,QAAU,UACdA,QAAQuD,IAAMP,SACdhD,QAAQrG,KAAOsJ,cACfjD,QAAQwD,aAAe9J,KAAKP,OAAOiC,YAAyC,MAA3B1B,KAAKP,OAAOiC,WAC7D4E,QAAQyD,mBAAqB/J,KAAKP,OAAOuK,aAAgBV,WAAaH,WAAuC,QAAxBA,UAAUF,OAAO,KAAgC,IAAdE,UACxH7C,QAAQhE,GAAKtC,KAAKP,OAAO6C,GACzBgE,QAAQ2D,YAAcX,SAAW,OACjChD,QAAQ6C,UAAYA,UACpB7C,QAAQkD,eAAiBA,eAClBU,UAAUC,iBACb,wBACA7D,SAaRmD,SAASH,SAAUC,cAAeJ,UAAWK,oBAErCjJ,KAAOP,YAGHA,KAAKP,OAAOoC,mBAEXC,qBAAaC,UACTjC,eAAewJ,SAAUC,cAAeJ,UAAWK,gBAAgB3C,MACpE,SAASuD,qBACDlJ,MAAM,yBACVX,KAAKjB,OAAO+K,cAAcD,OAAOtD,MACjCvG,KAAKL,sBAMZ4B,qBAAaE,kBAET4H,eAAeN,SAAUC,cAAeJ,UAAWK,gBAAgB3C,MACpE,SAASuD,qBACDlJ,MAAM,sCACNA,MAAMkJ,OAAOtD,MACjBvG,KAAKjB,OAAO+K,cAAcD,OAAOtD,MACjCvG,KAAKL,kDAWjBoK,WAAa,iEACbC,OAAS,GAEJC,EAAI,EAAGA,EAJH,EAIeA,IAAK,KACzBC,YAAcC,KAAKC,MAAMD,KAAKE,SAAWN,WAAWO,QACxDN,QAAUD,WAAWQ,OAAOL,oBAGzBF,+CAIDQ,oBAAe1K,qCACf2K,aAAeC,wBAAc5I,IAAI0I,cACnCC,oBACOA,aAAaE,aAGlBC,mCAAa,cAAcC,wBACfL,uDACO1K,mEAGXgL,SAASF,WAAWG,KAAMH,WAAYA,WAAWI,UACxDJ,kCAGY7L,YAEfgH,QAAU,GACV7G,QAAS,2BAAeH,4BACxB4B,MAAMzB,QAGV6G,QAAQ3F,IAAMA,YAGd2F,QAAQzE,aAAepC,OAAOoC,aAG9ByE,QAAQJ,uBAAyBzG,OAAOyG,uBACxCI,QAAQL,uBAAyBxG,OAAOwG,uBAGxCK,QAAQ0D,YAAqC,KAAvBvK,OAAO+L,aAG7BlF,QAAQmF,uBAAyBhM,OAAOiM,wBAGxCpF,QAAQqF,YAAmC,KAArBlM,OAAOkM,YAC7BrF,QAAQsF,WAAiC,KAApBnM,OAAOmM,WAC5BtF,QAAQuF,YAAmC,KAArBpM,OAAOoM,YAC7BvF,QAAQwF,eAAyC,KAAxBrM,OAAOqM,eAChCxF,QAAQN,YAAcvG,OAAOsM,eAG7BzF,QAAQhE,GAAG,GACXgE,QAAQhE,GAAG0J,OAASjJ,EAAEkJ,IAAIC,QAC1B5F,QAAQhE,GAAG6J,MAAQ,cACnB7F,QAAQhE,GAAG+D,MAAQ5G,OAAO2M,SAC1B9F,QAAQhE,GAAG+J,OAAS5M,OAAO6M,UAC3BhG,QAAQhE,GAAGiK,MAAQ9M,OAAO+M,SAC1BlG,QAAQhE,GAAGE,WAAa/C,OAAOgN,cAC/BnG,QAAQhE,GAAG0D,YAAcvG,OAAOsM,eAChCzF,QAAQhE,GAAGF,SAAW3C,OAAOiN,YAC7BpG,QAAQhE,GAAGqK,UAAYlN,OAAO+L,aAC9BlF,QAAQhE,GAAGsK,UAAYnN,OAAOoN,aAC9BvG,QAAQhE,GAAGoD,UAAYjG,OAAOqN,aAC9BxG,QAAQhE,GAAGyK,SAAWtN,OAAOsN,SAC7BzG,QAAQhE,GAAG0K,MAAQhN,KAAKiN,wBAAwBxN,QAGhD6G,QAAQ,UAAY7G,OAAOgN,gBAAgB,EAC3CnG,QAAQ,QAAU7G,OAAOiN,cAAc,EAEhCpG,6BAGUhH,cACX4N,WAAalN,KAAKmN,gBAClBC,gBAAkBpN,KAAKqN,gBAAgB/N,QACvCC,UAAYS,KAAKsN,uBAGvBF,gBAAgBG,SAAQ,EACxBH,gBAAgB7L,SAAW,QAC3B6L,gBAAgB7N,UAAYA,gBAEtBC,YAAcgO,aAAa/J,OAAO,CACpCgF,KAAMyE,WAAW5B,KACjBmC,gBAAiBL,gBACjBM,OAAO,WAIM,IAAI1N,KAAKV,OAAQC,UAAWC,MAAO4N,iBAC3CzL,gBAKLnC,MAAM8E,OAEH9E"}